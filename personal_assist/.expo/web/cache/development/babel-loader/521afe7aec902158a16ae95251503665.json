{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _NativeDialogManagerAndroid = _interopRequireDefault(require(\"../NativeModules/specs/NativeDialogManagerAndroid\"));\n\nvar _NativePermissionsAndroid = _interopRequireDefault(require(\"./NativePermissionsAndroid\"));\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar Platform = require('../Utilities/Platform');\n\nvar PERMISSION_REQUEST_RESULT = Object.freeze({\n  GRANTED: 'granted',\n  DENIED: 'denied',\n  NEVER_ASK_AGAIN: 'never_ask_again'\n});\nvar PERMISSIONS = Object.freeze({\n  READ_CALENDAR: 'android.permission.READ_CALENDAR',\n  WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',\n  CAMERA: 'android.permission.CAMERA',\n  READ_CONTACTS: 'android.permission.READ_CONTACTS',\n  WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',\n  GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',\n  ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',\n  ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',\n  ACCESS_BACKGROUND_LOCATION: 'android.permission.ACCESS_BACKGROUND_LOCATION',\n  RECORD_AUDIO: 'android.permission.RECORD_AUDIO',\n  READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',\n  CALL_PHONE: 'android.permission.CALL_PHONE',\n  READ_CALL_LOG: 'android.permission.READ_CALL_LOG',\n  WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',\n  ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',\n  USE_SIP: 'android.permission.USE_SIP',\n  PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',\n  BODY_SENSORS: 'android.permission.BODY_SENSORS',\n  SEND_SMS: 'android.permission.SEND_SMS',\n  RECEIVE_SMS: 'android.permission.RECEIVE_SMS',\n  READ_SMS: 'android.permission.READ_SMS',\n  RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',\n  RECEIVE_MMS: 'android.permission.RECEIVE_MMS',\n  READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',\n  WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE',\n  BLUETOOTH_CONNECT: 'android.permission.BLUETOOTH_CONNECT',\n  BLUETOOTH_SCAN: 'android.permission.BLUETOOTH_SCAN',\n  BLUETOOTH_ADVERTISE: 'android.permission.BLUETOOTH_ADVERTISE'\n});\n\nvar PermissionsAndroid = function () {\n  function PermissionsAndroid() {\n    (0, _classCallCheck2.default)(this, PermissionsAndroid);\n    this.PERMISSIONS = PERMISSIONS;\n    this.RESULTS = PERMISSION_REQUEST_RESULT;\n  }\n\n  (0, _createClass2.default)(PermissionsAndroid, [{\n    key: \"checkPermission\",\n    value: function checkPermission(permission) {\n      console.warn('\"PermissionsAndroid.checkPermission\" is deprecated. Use \"PermissionsAndroid.check\" instead');\n\n      if (Platform.OS !== 'android') {\n        console.warn('\"PermissionsAndroid\" module works only for Android platform.');\n        return Promise.resolve(false);\n      }\n\n      (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');\n      return _NativePermissionsAndroid.default.checkPermission(permission);\n    }\n  }, {\n    key: \"check\",\n    value: function check(permission) {\n      if (Platform.OS !== 'android') {\n        console.warn('\"PermissionsAndroid\" module works only for Android platform.');\n        return Promise.resolve(false);\n      }\n\n      (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');\n      return _NativePermissionsAndroid.default.checkPermission(permission);\n    }\n  }, {\n    key: \"requestPermission\",\n    value: function requestPermission(permission, rationale) {\n      var response;\n      return _regenerator.default.async(function requestPermission$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.warn('\"PermissionsAndroid.requestPermission\" is deprecated. Use \"PermissionsAndroid.request\" instead');\n\n              if (!(Platform.OS !== 'android')) {\n                _context.next = 4;\n                break;\n              }\n\n              console.warn('\"PermissionsAndroid\" module works only for Android platform.');\n              return _context.abrupt(\"return\", Promise.resolve(false));\n\n            case 4:\n              _context.next = 6;\n              return _regenerator.default.awrap(this.request(permission, rationale));\n\n            case 6:\n              response = _context.sent;\n              return _context.abrupt(\"return\", response === this.RESULTS.GRANTED);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"request\",\n    value: function request(permission, rationale) {\n      var shouldShowRationale;\n      return _regenerator.default.async(function request$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(Platform.OS !== 'android')) {\n                _context2.next = 3;\n                break;\n              }\n\n              console.warn('\"PermissionsAndroid\" module works only for Android platform.');\n              return _context2.abrupt(\"return\", Promise.resolve(this.RESULTS.DENIED));\n\n            case 3:\n              (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');\n\n              if (!rationale) {\n                _context2.next = 10;\n                break;\n              }\n\n              _context2.next = 7;\n              return _regenerator.default.awrap(_NativePermissionsAndroid.default.shouldShowRequestPermissionRationale(permission));\n\n            case 7:\n              shouldShowRationale = _context2.sent;\n\n              if (!(shouldShowRationale && !!_NativeDialogManagerAndroid.default)) {\n                _context2.next = 10;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n                var options = (0, _extends2.default)({}, rationale);\n\n                _NativeDialogManagerAndroid.default.showAlert(options, function () {\n                  return reject(new Error('Error showing rationale'));\n                }, function () {\n                  return resolve(_NativePermissionsAndroid.default.requestPermission(permission));\n                });\n              }));\n\n            case 10:\n              return _context2.abrupt(\"return\", _NativePermissionsAndroid.default.requestPermission(permission));\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"requestMultiple\",\n    value: function requestMultiple(permissions) {\n      if (Platform.OS !== 'android') {\n        console.warn('\"PermissionsAndroid\" module works only for Android platform.');\n        return Promise.resolve({});\n      }\n\n      (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');\n      return _NativePermissionsAndroid.default.requestMultiplePermissions(permissions);\n    }\n  }]);\n  return PermissionsAndroid;\n}();\n\nvar PermissionsAndroidInstance = new PermissionsAndroid();\nmodule.exports = PermissionsAndroidInstance;","map":{"version":3,"sources":["D:/vsCodes/friday/personal_assist/node_modules/react-native/Libraries/PermissionsAndroid/PermissionsAndroid.js"],"names":["Platform","require","PERMISSION_REQUEST_RESULT","Object","freeze","GRANTED","DENIED","NEVER_ASK_AGAIN","PERMISSIONS","READ_CALENDAR","WRITE_CALENDAR","CAMERA","READ_CONTACTS","WRITE_CONTACTS","GET_ACCOUNTS","ACCESS_FINE_LOCATION","ACCESS_COARSE_LOCATION","ACCESS_BACKGROUND_LOCATION","RECORD_AUDIO","READ_PHONE_STATE","CALL_PHONE","READ_CALL_LOG","WRITE_CALL_LOG","ADD_VOICEMAIL","USE_SIP","PROCESS_OUTGOING_CALLS","BODY_SENSORS","SEND_SMS","RECEIVE_SMS","READ_SMS","RECEIVE_WAP_PUSH","RECEIVE_MMS","READ_EXTERNAL_STORAGE","WRITE_EXTERNAL_STORAGE","BLUETOOTH_CONNECT","BLUETOOTH_SCAN","BLUETOOTH_ADVERTISE","PermissionsAndroid","RESULTS","permission","console","warn","OS","Promise","resolve","NativePermissionsAndroid","checkPermission","rationale","request","response","shouldShowRequestPermissionRationale","shouldShowRationale","NativeDialogManagerAndroid","reject","options","showAlert","Error","requestPermission","permissions","requestMultiplePermissions","PermissionsAndroidInstance","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\nconst Platform = require('../Utilities/Platform');\n\nimport NativeDialogManagerAndroid from '../NativeModules/specs/NativeDialogManagerAndroid';\nimport NativePermissionsAndroid from './NativePermissionsAndroid';\nimport type {\n  PermissionStatus,\n  PermissionType,\n} from './NativePermissionsAndroid';\nimport invariant from 'invariant';\n\nexport type Rationale = {\n  title: string,\n  message: string,\n  buttonPositive?: string,\n  buttonNegative?: string,\n  buttonNeutral?: string,\n  ...\n};\n\nconst PERMISSION_REQUEST_RESULT = Object.freeze({\n  GRANTED: 'granted',\n  DENIED: 'denied',\n  NEVER_ASK_AGAIN: 'never_ask_again',\n});\n\nconst PERMISSIONS = Object.freeze({\n  READ_CALENDAR: 'android.permission.READ_CALENDAR',\n  WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',\n  CAMERA: 'android.permission.CAMERA',\n  READ_CONTACTS: 'android.permission.READ_CONTACTS',\n  WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',\n  GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',\n  ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',\n  ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',\n  ACCESS_BACKGROUND_LOCATION: 'android.permission.ACCESS_BACKGROUND_LOCATION',\n  RECORD_AUDIO: 'android.permission.RECORD_AUDIO',\n  READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',\n  CALL_PHONE: 'android.permission.CALL_PHONE',\n  READ_CALL_LOG: 'android.permission.READ_CALL_LOG',\n  WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',\n  ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',\n  USE_SIP: 'android.permission.USE_SIP',\n  PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',\n  BODY_SENSORS: 'android.permission.BODY_SENSORS',\n  SEND_SMS: 'android.permission.SEND_SMS',\n  RECEIVE_SMS: 'android.permission.RECEIVE_SMS',\n  READ_SMS: 'android.permission.READ_SMS',\n  RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',\n  RECEIVE_MMS: 'android.permission.RECEIVE_MMS',\n  READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',\n  WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE',\n  BLUETOOTH_CONNECT: 'android.permission.BLUETOOTH_CONNECT',\n  BLUETOOTH_SCAN: 'android.permission.BLUETOOTH_SCAN',\n  BLUETOOTH_ADVERTISE: 'android.permission.BLUETOOTH_ADVERTISE',\n});\n\n/**\n * `PermissionsAndroid` provides access to Android M's new permissions model.\n *\n * See https://reactnative.dev/docs/permissionsandroid.html\n */\n\nclass PermissionsAndroid {\n  PERMISSIONS: {|\n    ACCESS_BACKGROUND_LOCATION: string,\n    ACCESS_COARSE_LOCATION: string,\n    ACCESS_FINE_LOCATION: string,\n    ADD_VOICEMAIL: string,\n    BLUETOOTH_ADVERTISE: string,\n    BLUETOOTH_CONNECT: string,\n    BLUETOOTH_SCAN: string,\n    BODY_SENSORS: string,\n    CALL_PHONE: string,\n    CAMERA: string,\n    GET_ACCOUNTS: string,\n    PROCESS_OUTGOING_CALLS: string,\n    READ_CALENDAR: string,\n    READ_CALL_LOG: string,\n    READ_CONTACTS: string,\n    READ_EXTERNAL_STORAGE: string,\n    READ_PHONE_STATE: string,\n    READ_SMS: string,\n    RECEIVE_MMS: string,\n    RECEIVE_SMS: string,\n    RECEIVE_WAP_PUSH: string,\n    RECORD_AUDIO: string,\n    SEND_SMS: string,\n    USE_SIP: string,\n    WRITE_CALENDAR: string,\n    WRITE_CALL_LOG: string,\n    WRITE_CONTACTS: string,\n    WRITE_EXTERNAL_STORAGE: string,\n  |} = PERMISSIONS;\n  RESULTS: {|\n    DENIED: $TEMPORARY$string<'denied'>,\n    GRANTED: $TEMPORARY$string<'granted'>,\n    NEVER_ASK_AGAIN: $TEMPORARY$string<'never_ask_again'>,\n  |} = PERMISSION_REQUEST_RESULT;\n\n  /**\n   * DEPRECATED - use check\n   *\n   * Returns a promise resolving to a boolean value as to whether the specified\n   * permissions has been granted\n   *\n   * @deprecated\n   */\n  checkPermission(permission: PermissionType): Promise<boolean> {\n    console.warn(\n      '\"PermissionsAndroid.checkPermission\" is deprecated. Use \"PermissionsAndroid.check\" instead',\n    );\n    if (Platform.OS !== 'android') {\n      console.warn(\n        '\"PermissionsAndroid\" module works only for Android platform.',\n      );\n      return Promise.resolve(false);\n    }\n\n    invariant(\n      NativePermissionsAndroid,\n      'PermissionsAndroid is not installed correctly.',\n    );\n\n    return NativePermissionsAndroid.checkPermission(permission);\n  }\n\n  /**\n   * Returns a promise resolving to a boolean value as to whether the specified\n   * permissions has been granted\n   *\n   * See https://reactnative.dev/docs/permissionsandroid.html#check\n   */\n  check(permission: PermissionType): Promise<boolean> {\n    if (Platform.OS !== 'android') {\n      console.warn(\n        '\"PermissionsAndroid\" module works only for Android platform.',\n      );\n      return Promise.resolve(false);\n    }\n\n    invariant(\n      NativePermissionsAndroid,\n      'PermissionsAndroid is not installed correctly.',\n    );\n\n    return NativePermissionsAndroid.checkPermission(permission);\n  }\n\n  /**\n   * DEPRECATED - use request\n   *\n   * Prompts the user to enable a permission and returns a promise resolving to a\n   * boolean value indicating whether the user allowed or denied the request\n   *\n   * If the optional rationale argument is included (which is an object with a\n   * `title` and `message`), this function checks with the OS whether it is\n   * necessary to show a dialog explaining why the permission is needed\n   * (https://developer.android.com/training/permissions/requesting.html#explain)\n   * and then shows the system permission dialog\n   *\n   * @deprecated\n   */\n  async requestPermission(\n    permission: PermissionType,\n    rationale?: Rationale,\n  ): Promise<boolean> {\n    console.warn(\n      '\"PermissionsAndroid.requestPermission\" is deprecated. Use \"PermissionsAndroid.request\" instead',\n    );\n    if (Platform.OS !== 'android') {\n      console.warn(\n        '\"PermissionsAndroid\" module works only for Android platform.',\n      );\n      return Promise.resolve(false);\n    }\n\n    const response = await this.request(permission, rationale);\n    return response === this.RESULTS.GRANTED;\n  }\n\n  /**\n   * Prompts the user to enable a permission and returns a promise resolving to a\n   * string value indicating whether the user allowed or denied the request\n   *\n   * See https://reactnative.dev/docs/permissionsandroid.html#request\n   */\n  async request(\n    permission: PermissionType,\n    rationale?: Rationale,\n  ): Promise<PermissionStatus> {\n    if (Platform.OS !== 'android') {\n      console.warn(\n        '\"PermissionsAndroid\" module works only for Android platform.',\n      );\n      return Promise.resolve(this.RESULTS.DENIED);\n    }\n\n    invariant(\n      NativePermissionsAndroid,\n      'PermissionsAndroid is not installed correctly.',\n    );\n\n    if (rationale) {\n      const shouldShowRationale = await NativePermissionsAndroid.shouldShowRequestPermissionRationale(\n        permission,\n      );\n\n      if (shouldShowRationale && !!NativeDialogManagerAndroid) {\n        return new Promise((resolve, reject) => {\n          const options = {\n            ...rationale,\n          };\n          NativeDialogManagerAndroid.showAlert(\n            /* $FlowFixMe[incompatible-exact] (>=0.111.0 site=react_native_fb)\n             * This comment suppresses an error found when Flow v0.111 was\n             * deployed. To see the error, delete this comment and run Flow.\n             */\n            options,\n            () => reject(new Error('Error showing rationale')),\n            () =>\n              resolve(NativePermissionsAndroid.requestPermission(permission)),\n          );\n        });\n      }\n    }\n    return NativePermissionsAndroid.requestPermission(permission);\n  }\n\n  /**\n   * Prompts the user to enable multiple permissions in the same dialog and\n   * returns an object with the permissions as keys and strings as values\n   * indicating whether the user allowed or denied the request\n   *\n   * See https://reactnative.dev/docs/permissionsandroid.html#requestmultiple\n   */\n  requestMultiple(\n    permissions: Array<PermissionType>,\n  ): Promise<{[permission: PermissionType]: PermissionStatus, ...}> {\n    if (Platform.OS !== 'android') {\n      console.warn(\n        '\"PermissionsAndroid\" module works only for Android platform.',\n      );\n      return Promise.resolve({});\n    }\n\n    invariant(\n      NativePermissionsAndroid,\n      'PermissionsAndroid is not installed correctly.',\n    );\n\n    return NativePermissionsAndroid.requestMultiplePermissions(permissions);\n  }\n}\n\nconst PermissionsAndroidInstance: PermissionsAndroid = new PermissionsAndroid();\n\nmodule.exports = PermissionsAndroidInstance;\n"]},"metadata":{},"sourceType":"script"}