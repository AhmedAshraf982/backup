{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.usePerformanceLogger = usePerformanceLogger;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _GlobalPerformanceLogger = _interopRequireDefault(require(\"./GlobalPerformanceLogger\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar PerformanceLoggerContext = React.createContext(_GlobalPerformanceLogger.default);\n\nif (__DEV__) {\n  PerformanceLoggerContext.displayName = 'PerformanceLoggerContext';\n}\n\nfunction usePerformanceLogger() {\n  return (0, React.useContext)(PerformanceLoggerContext);\n}\n\nvar _default = PerformanceLoggerContext;\nexports.default = _default;","map":{"version":3,"sources":["D:/vsCodes/friday/personal_assist/node_modules/react-native/Libraries/Utilities/PerformanceLoggerContext.js"],"names":["PerformanceLoggerContext","React","createContext","GlobalPerformanceLogger","__DEV__","displayName","usePerformanceLogger"],"mappings":";;;;;;;;AAUA;;AAEA;;;;;;AASA,IAAMA,wBAA2D,GAAGC,KAAK,CAACC,aAAN,CAClEC,gCADkE,CAApE;;AAGA,IAAIC,OAAJ,EAAa;AACXJ,EAAAA,wBAAwB,CAACK,WAAzB,GAAuC,0BAAvC;AACD;;AAEM,SAASC,oBAAT,GAAoD;AACzD,SAAO,sBAAWN,wBAAX,CAAP;AACD;;eAEcA,wB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport * as React from 'react';\nimport {useContext} from 'react';\nimport GlobalPerformanceLogger from './GlobalPerformanceLogger';\nimport type {IPerformanceLogger} from './createPerformanceLogger';\n\n/**\n * This is a React Context that provides a scoped instance of IPerformanceLogger.\n * We wrap every <AppContainer /> with a Provider for this context so the logger\n * should be available in every component.\n * See React docs about using Context: https://reactjs.org/docs/context.html\n */\nconst PerformanceLoggerContext: React.Context<IPerformanceLogger> = React.createContext(\n  GlobalPerformanceLogger,\n);\nif (__DEV__) {\n  PerformanceLoggerContext.displayName = 'PerformanceLoggerContext';\n}\n\nexport function usePerformanceLogger(): IPerformanceLogger {\n  return useContext(PerformanceLoggerContext);\n}\n\nexport default PerformanceLoggerContext;\n"]},"metadata":{},"sourceType":"script"}