{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _NativeDevSettings = _interopRequireDefault(require(\"../NativeModules/specs/NativeDevSettings\"));\n\nvar _NativeEventEmitter = _interopRequireDefault(require(\"../EventEmitter/NativeEventEmitter\"));\n\nvar _Platform = _interopRequireDefault(require(\"../Utilities/Platform\"));\n\nvar DevSettings = {\n  addMenuItem: function addMenuItem(title, handler) {},\n  reload: function reload(reason) {},\n  onFastRefresh: function onFastRefresh() {}\n};\n\nif (__DEV__) {\n  var emitter = new _NativeEventEmitter.default(_Platform.default.OS !== 'ios' ? null : _NativeDevSettings.default);\n  var subscriptions = new Map();\n  DevSettings = {\n    addMenuItem: function addMenuItem(title, handler) {\n      var subscription = subscriptions.get(title);\n\n      if (subscription != null) {\n        subscription.remove();\n      } else {\n        _NativeDevSettings.default.addMenuItem(title);\n      }\n\n      subscription = emitter.addListener('didPressMenuItem', function (event) {\n        if (event.title === title) {\n          handler();\n        }\n      });\n      subscriptions.set(title, subscription);\n    },\n    reload: function reload(reason) {\n      if (_NativeDevSettings.default.reloadWithReason != null) {\n        _NativeDevSettings.default.reloadWithReason(reason != null ? reason : 'Uncategorized from JS');\n      } else {\n        _NativeDevSettings.default.reload();\n      }\n    },\n    onFastRefresh: function onFastRefresh() {\n      _NativeDevSettings.default.onFastRefresh == null ? void 0 : _NativeDevSettings.default.onFastRefresh();\n    }\n  };\n}\n\nmodule.exports = DevSettings;","map":{"version":3,"sources":["D:/vsCodes/friday/personal_assist/node_modules/react-native/Libraries/Utilities/DevSettings.js"],"names":["DevSettings","addMenuItem","title","handler","reload","reason","onFastRefresh","__DEV__","emitter","NativeEventEmitter","Platform","OS","NativeDevSettings","subscriptions","Map","subscription","get","remove","addListener","event","set","reloadWithReason","module","exports"],"mappings":";;AAUA;;AACA;;AACA;;AAEA,IAAIA,WAIH,GAAG;AACFC,EAAAA,WADE,uBACUC,KADV,EACyBC,OADzB,EACqD,CAAE,CADvD;AAEFC,EAAAA,MAFE,kBAEKC,MAFL,EAE4B,CAAE,CAF9B;AAGFC,EAAAA,aAHE,2BAGoB,CAAE;AAHtB,CAJJ;;AAcA,IAAIC,OAAJ,EAAa;AACX,MAAMC,OAAO,GAAG,IAAIC,2BAAJ,CAGdC,kBAASC,EAAT,KAAgB,KAAhB,GAAwB,IAAxB,GAA+BC,0BAHjB,CAAhB;AAKA,MAAMC,aAAa,GAAG,IAAIC,GAAJ,EAAtB;AAEAd,EAAAA,WAAW,GAAG;AACZC,IAAAA,WADY,uBACAC,KADA,EACeC,OADf,EAC2C;AAKrD,UAAIY,YAAY,GAAGF,aAAa,CAACG,GAAd,CAAkBd,KAAlB,CAAnB;;AACA,UAAIa,YAAY,IAAI,IAApB,EAA0B;AACxBA,QAAAA,YAAY,CAACE,MAAb;AACD,OAFD,MAEO;AACLL,mCAAkBX,WAAlB,CAA8BC,KAA9B;AACD;;AAEDa,MAAAA,YAAY,GAAGP,OAAO,CAACU,WAAR,CAAoB,kBAApB,EAAwC,UAAAC,KAAK,EAAI;AAC9D,YAAIA,KAAK,CAACjB,KAAN,KAAgBA,KAApB,EAA2B;AACzBC,UAAAA,OAAO;AACR;AACF,OAJc,CAAf;AAKAU,MAAAA,aAAa,CAACO,GAAd,CAAkBlB,KAAlB,EAAyBa,YAAzB;AACD,KAnBW;AAoBZX,IAAAA,MApBY,kBAoBLC,MApBK,EAoBkB;AAC5B,UAAIO,2BAAkBS,gBAAlB,IAAsC,IAA1C,EAAgD;AAC9CT,mCAAkBS,gBAAlB,CAAmChB,MAAnC,WAAmCA,MAAnC,GAA6C,uBAA7C;AACD,OAFD,MAEO;AACLO,mCAAkBR,MAAlB;AACD;AACF,KA1BW;AA2BZE,IAAAA,aA3BY,2BA2BU;AACpBM,iCAAkBN,aAAlB,+CAAkBA,aAAlB;AACD;AA7BW,GAAd;AA+BD;;AAEDgB,MAAM,CAACC,OAAP,GAAiBvB,WAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport NativeDevSettings from '../NativeModules/specs/NativeDevSettings';\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport Platform from '../Utilities/Platform';\n\nlet DevSettings: {\n  addMenuItem(title: string, handler: () => mixed): void,\n  reload(reason?: string): void,\n  onFastRefresh(): void,\n} = {\n  addMenuItem(title: string, handler: () => mixed): void {},\n  reload(reason?: string): void {},\n  onFastRefresh(): void {},\n};\n\ntype DevSettingsEventDefinitions = {\n  didPressMenuItem: [{title: string}],\n};\n\nif (__DEV__) {\n  const emitter = new NativeEventEmitter<DevSettingsEventDefinitions>(\n    // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior\n    // If you want to use the native module on other platforms, please remove this condition and test its behavior\n    Platform.OS !== 'ios' ? null : NativeDevSettings,\n  );\n  const subscriptions = new Map();\n\n  DevSettings = {\n    addMenuItem(title: string, handler: () => mixed): void {\n      // Make sure items are not added multiple times. This can\n      // happen when hot reloading the module that registers the\n      // menu items. The title is used as the id which means we\n      // don't support multiple items with the same name.\n      let subscription = subscriptions.get(title);\n      if (subscription != null) {\n        subscription.remove();\n      } else {\n        NativeDevSettings.addMenuItem(title);\n      }\n\n      subscription = emitter.addListener('didPressMenuItem', event => {\n        if (event.title === title) {\n          handler();\n        }\n      });\n      subscriptions.set(title, subscription);\n    },\n    reload(reason?: string): void {\n      if (NativeDevSettings.reloadWithReason != null) {\n        NativeDevSettings.reloadWithReason(reason ?? 'Uncategorized from JS');\n      } else {\n        NativeDevSettings.reload();\n      }\n    },\n    onFastRefresh(): void {\n      NativeDevSettings.onFastRefresh?.();\n    },\n  };\n}\n\nmodule.exports = DevSettings;\n"]},"metadata":{},"sourceType":"script"}