{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _EventEmitter = _interopRequireDefault(require(\"../vendor/emitter/EventEmitter\"));\n\nvar _NativeEventEmitter = _interopRequireDefault(require(\"../EventEmitter/NativeEventEmitter\"));\n\nvar _NativeAppearance = _interopRequireDefault(require(\"./NativeAppearance\"));\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar _DebugEnvironment = require(\"./DebugEnvironment\");\n\nvar _Platform = _interopRequireDefault(require(\"../Utilities/Platform\"));\n\nvar eventEmitter = new _EventEmitter.default();\n\nif (_NativeAppearance.default) {\n  var nativeEventEmitter = new _NativeEventEmitter.default(_Platform.default.OS !== 'ios' ? null : _NativeAppearance.default);\n  nativeEventEmitter.addListener('appearanceChanged', function (newAppearance) {\n    var colorScheme = newAppearance.colorScheme;\n    (0, _invariant.default)(colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null, \"Unrecognized color scheme. Did you mean 'dark' or 'light'?\");\n    eventEmitter.emit('change', {\n      colorScheme: colorScheme\n    });\n  });\n}\n\nmodule.exports = {\n  getColorScheme: function getColorScheme() {\n    if (__DEV__) {\n      if (_DebugEnvironment.isAsyncDebugging) {\n        return 'light';\n      }\n    }\n\n    var nativeColorScheme = _NativeAppearance.default == null ? null : _NativeAppearance.default.getColorScheme() || null;\n    (0, _invariant.default)(nativeColorScheme === 'dark' || nativeColorScheme === 'light' || nativeColorScheme == null, \"Unrecognized color scheme. Did you mean 'dark' or 'light'?\");\n    return nativeColorScheme;\n  },\n  addChangeListener: function addChangeListener(listener) {\n    return eventEmitter.addListener('change', listener);\n  },\n  removeChangeListener: function removeChangeListener(listener) {\n    eventEmitter.removeListener('change', listener);\n  }\n};","map":{"version":3,"sources":["D:/vsCodes/friday/personal_assist/node_modules/react-native/Libraries/Utilities/Appearance.js"],"names":["eventEmitter","EventEmitter","NativeAppearance","nativeEventEmitter","NativeEventEmitter","Platform","OS","addListener","newAppearance","colorScheme","emit","module","exports","getColorScheme","__DEV__","isAsyncDebugging","nativeColorScheme","addChangeListener","listener","removeChangeListener","removeListener"],"mappings":";;AAUA;;AAGA;;AACA;;AAIA;;AACA;;AACA;;AAGA,IAAMA,YAAY,GAAG,IAAIC,qBAAJ,EAArB;;AAQA,IAAIC,yBAAJ,EAAsB;AACpB,MAAMC,kBAAkB,GAAG,IAAIC,2BAAJ,CAGzBC,kBAASC,EAAT,KAAgB,KAAhB,GAAwB,IAAxB,GAA+BJ,yBAHN,CAA3B;AAKAC,EAAAA,kBAAkB,CAACI,WAAnB,CACE,mBADF,EAEE,UAACC,aAAD,EAA0C;AACxC,QAAOC,WAAP,GAAsBD,aAAtB,CAAOC,WAAP;AACA,4BACEA,WAAW,KAAK,MAAhB,IACEA,WAAW,KAAK,OADlB,IAEEA,WAAW,IAAI,IAHnB,EAIE,4DAJF;AAMAT,IAAAA,YAAY,CAACU,IAAb,CAAkB,QAAlB,EAA4B;AAACD,MAAAA,WAAW,EAAXA;AAAD,KAA5B;AACD,GAXH;AAaD;;AAEDE,MAAM,CAACC,OAAP,GAAiB;AAWfC,EAAAA,cAXe,4BAWoB;AACjC,QAAIC,OAAJ,EAAa;AACX,UAAIC,kCAAJ,EAAsB;AAGpB,eAAO,OAAP;AACD;AACF;;AAGD,QAAMC,iBAA0B,GAC9Bd,6BAAoB,IAApB,GACI,IADJ,GAEIA,0BAAiBW,cAAjB,MAAqC,IAH3C;AAIA,4BACEG,iBAAiB,KAAK,MAAtB,IACEA,iBAAiB,KAAK,OADxB,IAEEA,iBAAiB,IAAI,IAHzB,EAIE,4DAJF;AAMA,WAAOA,iBAAP;AACD,GAhCc;AAqCfC,EAAAA,iBArCe,6BAqCGC,QArCH,EAqCoD;AACjE,WAAOlB,YAAY,CAACO,WAAb,CAAyB,QAAzB,EAAmCW,QAAnC,CAAP;AACD,GAvCc;AA4CfC,EAAAA,oBA5Ce,gCA4CMD,QA5CN,EA4C0C;AAEvDlB,IAAAA,YAAY,CAACoB,cAAb,CAA4B,QAA5B,EAAsCF,QAAtC;AACD;AA/Cc,CAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport EventEmitter, {\n  type EventSubscription,\n} from '../vendor/emitter/EventEmitter';\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport NativeAppearance, {\n  type AppearancePreferences,\n  type ColorSchemeName,\n} from './NativeAppearance';\nimport invariant from 'invariant';\nimport {isAsyncDebugging} from './DebugEnvironment';\nimport Platform from '../Utilities/Platform';\n\ntype AppearanceListener = (preferences: AppearancePreferences) => void;\nconst eventEmitter = new EventEmitter<{\n  change: [AppearancePreferences],\n}>();\n\ntype NativeAppearanceEventDefinitions = {\n  appearanceChanged: [AppearancePreferences],\n};\n\nif (NativeAppearance) {\n  const nativeEventEmitter = new NativeEventEmitter<NativeAppearanceEventDefinitions>(\n    // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior\n    // If you want to use the native module on other platforms, please remove this condition and test its behavior\n    Platform.OS !== 'ios' ? null : NativeAppearance,\n  );\n  nativeEventEmitter.addListener(\n    'appearanceChanged',\n    (newAppearance: AppearancePreferences) => {\n      const {colorScheme} = newAppearance;\n      invariant(\n        colorScheme === 'dark' ||\n          colorScheme === 'light' ||\n          colorScheme == null,\n        \"Unrecognized color scheme. Did you mean 'dark' or 'light'?\",\n      );\n      eventEmitter.emit('change', {colorScheme});\n    },\n  );\n}\n\nmodule.exports = {\n  /**\n   * Note: Although color scheme is available immediately, it may change at any\n   * time. Any rendering logic or styles that depend on this should try to call\n   * this function on every render, rather than caching the value (for example,\n   * using inline styles rather than setting a value in a `StyleSheet`).\n   *\n   * Example: `const colorScheme = Appearance.getColorScheme();`\n   *\n   * @returns {?ColorSchemeName} Value for the color scheme preference.\n   */\n  getColorScheme(): ?ColorSchemeName {\n    if (__DEV__) {\n      if (isAsyncDebugging) {\n        // Hard code light theme when using the async debugger as\n        // sync calls aren't supported\n        return 'light';\n      }\n    }\n\n    // TODO: (hramos) T52919652 Use ?ColorSchemeName once codegen supports union\n    const nativeColorScheme: ?string =\n      NativeAppearance == null\n        ? null\n        : NativeAppearance.getColorScheme() || null;\n    invariant(\n      nativeColorScheme === 'dark' ||\n        nativeColorScheme === 'light' ||\n        nativeColorScheme == null,\n      \"Unrecognized color scheme. Did you mean 'dark' or 'light'?\",\n    );\n    return nativeColorScheme;\n  },\n\n  /**\n   * Add an event handler that is fired when appearance preferences change.\n   */\n  addChangeListener(listener: AppearanceListener): EventSubscription {\n    return eventEmitter.addListener('change', listener);\n  },\n\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addEventListener`.\n   */\n  removeChangeListener(listener: AppearanceListener): void {\n    // NOTE: This will report a deprecation notice via `console.error`.\n    eventEmitter.removeListener('change', listener);\n  },\n};\n"]},"metadata":{},"sourceType":"script"}