{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _ModalInjection = _interopRequireDefault(require(\"./ModalInjection\"));\n\nvar _NativeEventEmitter = _interopRequireDefault(require(\"../EventEmitter/NativeEventEmitter\"));\n\nvar _NativeModalManager = _interopRequireDefault(require(\"./NativeModalManager\"));\n\nvar _VirtualizedListContext = require(\"../Lists/VirtualizedListContext.js\");\n\nvar _RCTModalHostViewNativeComponent = _interopRequireDefault(require(\"./RCTModalHostViewNativeComponent\"));\n\nvar _jsxFileName = \"D:\\\\vsCodes\\\\friday\\\\personal_assist\\\\node_modules\\\\react-native\\\\Libraries\\\\Modal\\\\Modal.js\",\n    _container,\n    _ModalInjection$unsta;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar AppContainer = require('../ReactNative/AppContainer');\n\nvar I18nManager = require('../ReactNative/I18nManager');\n\nvar Platform = require('../Utilities/Platform');\n\nvar React = require('react');\n\nvar ScrollView = require('../Components/ScrollView/ScrollView');\n\nvar StyleSheet = require('../StyleSheet/StyleSheet');\n\nvar View = require('../Components/View/View');\n\nvar _require = require('../ReactNative/RootTag'),\n    RootTagContext = _require.RootTagContext;\n\nvar ModalEventEmitter = Platform.OS === 'ios' && _NativeModalManager.default != null ? new _NativeEventEmitter.default(Platform.OS !== 'ios' ? null : _NativeModalManager.default) : null;\nvar uniqueModalIdentifier = 0;\n\nfunction confirmProps(props) {\n  if (__DEV__) {\n    if (props.presentationStyle && props.presentationStyle !== 'overFullScreen' && props.transparent === true) {\n      console.warn(\"Modal with '\" + props.presentationStyle + \"' presentation style and 'transparent' value is not supported.\");\n    }\n  }\n}\n\nvar Modal = function (_React$Component) {\n  (0, _inherits2.default)(Modal, _React$Component);\n\n  var _super = _createSuper(Modal);\n\n  function Modal(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Modal);\n    _this = _super.call(this, props);\n\n    if (__DEV__) {\n      confirmProps(props);\n    }\n\n    _this._identifier = uniqueModalIdentifier++;\n    return _this;\n  }\n\n  (0, _createClass2.default)(Modal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (ModalEventEmitter) {\n        this._eventSubscription = ModalEventEmitter.addListener('modalDismissed', function (event) {\n          if (event.modalID === _this2._identifier && _this2.props.onDismiss) {\n            _this2.props.onDismiss();\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this._eventSubscription) {\n        this._eventSubscription.remove();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (__DEV__) {\n        confirmProps(this.props);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (this.props.visible !== true) {\n        return null;\n      }\n\n      var containerStyles = {\n        backgroundColor: this.props.transparent === true ? 'transparent' : 'white'\n      };\n      var animationType = this.props.animationType || 'none';\n      var presentationStyle = this.props.presentationStyle;\n\n      if (!presentationStyle) {\n        presentationStyle = 'fullScreen';\n\n        if (this.props.transparent === true) {\n          presentationStyle = 'overFullScreen';\n        }\n      }\n\n      var innerChildren = __DEV__ ? React.createElement(AppContainer, {\n        rootTag: this.context,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 7\n        }\n      }, this.props.children) : this.props.children;\n      return React.createElement(_RCTModalHostViewNativeComponent.default, {\n        animationType: animationType,\n        presentationStyle: presentationStyle,\n        transparent: this.props.transparent,\n        hardwareAccelerated: this.props.hardwareAccelerated,\n        onRequestClose: this.props.onRequestClose,\n        onShow: this.props.onShow,\n        onDismiss: function onDismiss() {\n          if (_this3.props.onDismiss) {\n            _this3.props.onDismiss();\n          }\n        },\n        visible: this.props.visible,\n        statusBarTranslucent: this.props.statusBarTranslucent,\n        identifier: this._identifier,\n        style: styles.modal,\n        onStartShouldSetResponder: this._shouldSetResponder,\n        supportedOrientations: this.props.supportedOrientations,\n        onOrientationChange: this.props.onOrientationChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 7\n        }\n      }, React.createElement(_VirtualizedListContext.VirtualizedListContextResetter, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 9\n        }\n      }, React.createElement(ScrollView.Context.Provider, {\n        value: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }\n      }, React.createElement(View, {\n        style: [styles.container, containerStyles],\n        collapsable: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 13\n        }\n      }, innerChildren))));\n    }\n  }, {\n    key: \"_shouldSetResponder\",\n    value: function _shouldSetResponder() {\n      return true;\n    }\n  }]);\n  return Modal;\n}(React.Component);\n\nModal.defaultProps = {\n  visible: true,\n  hardwareAccelerated: false\n};\nModal.contextType = RootTagContext;\nvar side = I18nManager.getConstants().isRTL ? 'right' : 'left';\nvar styles = StyleSheet.create({\n  modal: {\n    position: 'absolute'\n  },\n  container: (_container = {}, (0, _defineProperty2.default)(_container, side, 0), (0, _defineProperty2.default)(_container, \"top\", 0), (0, _defineProperty2.default)(_container, \"flex\", 1), _container)\n});\nvar ExportedModal = (_ModalInjection$unsta = _ModalInjection.default.unstable_Modal) != null ? _ModalInjection$unsta : Modal;\nmodule.exports = ExportedModal;","map":{"version":3,"sources":["D:/vsCodes/friday/personal_assist/node_modules/react-native/Libraries/Modal/Modal.js"],"names":["AppContainer","require","I18nManager","Platform","React","ScrollView","StyleSheet","View","RootTagContext","ModalEventEmitter","OS","NativeModalManager","NativeEventEmitter","uniqueModalIdentifier","confirmProps","props","__DEV__","presentationStyle","transparent","console","warn","Modal","_identifier","_eventSubscription","addListener","event","modalID","onDismiss","remove","visible","containerStyles","backgroundColor","animationType","innerChildren","context","children","hardwareAccelerated","onRequestClose","onShow","statusBarTranslucent","styles","modal","_shouldSetResponder","supportedOrientations","onOrientationChange","container","Component","defaultProps","contextType","side","getConstants","isRTL","create","position","ExportedModal","ModalInjection","unstable_Modal","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nconst AppContainer = require('../ReactNative/AppContainer');\nconst I18nManager = require('../ReactNative/I18nManager');\nimport ModalInjection from './ModalInjection';\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport NativeModalManager from './NativeModalManager';\nconst Platform = require('../Utilities/Platform');\nconst React = require('react');\nconst ScrollView = require('../Components/ScrollView/ScrollView');\nconst StyleSheet = require('../StyleSheet/StyleSheet');\nconst View = require('../Components/View/View');\n\nconst {RootTagContext} = require('../ReactNative/RootTag');\n\nimport type {ViewProps} from '../Components/View/ViewPropTypes';\nimport {VirtualizedListContextResetter} from '../Lists/VirtualizedListContext.js';\nimport type {RootTag} from '../ReactNative/RootTag';\nimport type {DirectEventHandler} from '../Types/CodegenTypes';\nimport {type EventSubscription} from '../vendor/emitter/EventEmitter';\nimport RCTModalHostView from './RCTModalHostViewNativeComponent';\n\ntype ModalEventDefinitions = {\n  modalDismissed: [{modalID: number}],\n};\n\nconst ModalEventEmitter =\n  Platform.OS === 'ios' && NativeModalManager != null\n    ? new NativeEventEmitter<ModalEventDefinitions>(\n        // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior\n        // If you want to use the native module on other platforms, please remove this condition and test its behavior\n        Platform.OS !== 'ios' ? null : NativeModalManager,\n      )\n    : null;\n\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n *\n * See https://reactnative.dev/docs/modal.html\n */\n\n// In order to route onDismiss callbacks, we need to uniquely identifier each\n// <Modal> on screen. There can be different ones, either nested or as siblings.\n// We cannot pass the onDismiss callback to native as the view will be\n// destroyed before the callback is fired.\nlet uniqueModalIdentifier = 0;\n\ntype OrientationChangeEvent = $ReadOnly<{|\n  orientation: 'portrait' | 'landscape',\n|}>;\n\nexport type Props = $ReadOnly<{|\n  ...ViewProps,\n\n  /**\n   * The `animationType` prop controls how the modal animates.\n   *\n   * See https://reactnative.dev/docs/modal.html#animationtype\n   */\n  animationType?: ?('none' | 'slide' | 'fade'),\n\n  /**\n   * The `presentationStyle` prop controls how the modal appears.\n   *\n   * See https://reactnative.dev/docs/modal.html#presentationstyle\n   */\n  presentationStyle?: ?(\n    | 'fullScreen'\n    | 'pageSheet'\n    | 'formSheet'\n    | 'overFullScreen'\n  ),\n\n  /**\n   * The `transparent` prop determines whether your modal will fill the\n   * entire view.\n   *\n   * See https://reactnative.dev/docs/modal.html#transparent\n   */\n  transparent?: ?boolean,\n\n  /**\n   * The `statusBarTranslucent` prop determines whether your modal should go under\n   * the system statusbar.\n   *\n   * See https://reactnative.dev/docs/modal.html#transparent\n   */\n  statusBarTranslucent?: ?boolean,\n\n  /**\n   * The `hardwareAccelerated` prop controls whether to force hardware\n   * acceleration for the underlying window.\n   *\n   * This prop works only on Android.\n   *\n   * See https://reactnative.dev/docs/modal.html#hardwareaccelerated\n   */\n  hardwareAccelerated?: ?boolean,\n\n  /**\n   * The `visible` prop determines whether your modal is visible.\n   *\n   * See https://reactnative.dev/docs/modal.html#visible\n   */\n  visible?: ?boolean,\n\n  /**\n   * The `onRequestClose` callback is called when the user taps the hardware\n   * back button on Android or the menu button on Apple TV.\n   *\n   * This is required on Apple TV and Android.\n   *\n   * See https://reactnative.dev/docs/modal.html#onrequestclose\n   */\n  onRequestClose?: ?DirectEventHandler<null>,\n\n  /**\n   * The `onShow` prop allows passing a function that will be called once the\n   * modal has been shown.\n   *\n   * See https://reactnative.dev/docs/modal.html#onshow\n   */\n  onShow?: ?DirectEventHandler<null>,\n\n  /**\n   * The `onDismiss` prop allows passing a function that will be called once\n   * the modal has been dismissed.\n   *\n   * See https://reactnative.dev/docs/modal.html#ondismiss\n   */\n  onDismiss?: ?() => mixed,\n\n  /**\n   * The `supportedOrientations` prop allows the modal to be rotated to any of the specified orientations.\n   *\n   * See https://reactnative.dev/docs/modal.html#supportedorientations\n   */\n  supportedOrientations?: ?$ReadOnlyArray<\n    | 'portrait'\n    | 'portrait-upside-down'\n    | 'landscape'\n    | 'landscape-left'\n    | 'landscape-right',\n  >,\n\n  /**\n   * The `onOrientationChange` callback is called when the orientation changes while the modal is being displayed.\n   *\n   * See https://reactnative.dev/docs/modal.html#onorientationchange\n   */\n  onOrientationChange?: ?DirectEventHandler<OrientationChangeEvent>,\n|}>;\n\nfunction confirmProps(props: Props) {\n  if (__DEV__) {\n    if (\n      props.presentationStyle &&\n      props.presentationStyle !== 'overFullScreen' &&\n      props.transparent === true\n    ) {\n      console.warn(\n        `Modal with '${props.presentationStyle}' presentation style and 'transparent' value is not supported.`,\n      );\n    }\n  }\n}\n\nclass Modal extends React.Component<Props> {\n  static defaultProps: {|hardwareAccelerated: boolean, visible: boolean|} = {\n    visible: true,\n    hardwareAccelerated: false,\n  };\n\n  static contextType: React.Context<RootTag> = RootTagContext;\n\n  _identifier: number;\n  _eventSubscription: ?EventSubscription;\n\n  constructor(props: Props) {\n    super(props);\n    if (__DEV__) {\n      confirmProps(props);\n    }\n    this._identifier = uniqueModalIdentifier++;\n  }\n\n  componentDidMount() {\n    // 'modalDismissed' is for the old renderer in iOS only\n    if (ModalEventEmitter) {\n      this._eventSubscription = ModalEventEmitter.addListener(\n        'modalDismissed',\n        event => {\n          if (event.modalID === this._identifier && this.props.onDismiss) {\n            this.props.onDismiss();\n          }\n        },\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    if (this._eventSubscription) {\n      this._eventSubscription.remove();\n    }\n  }\n\n  componentDidUpdate() {\n    if (__DEV__) {\n      confirmProps(this.props);\n    }\n  }\n\n  render(): React.Node {\n    if (this.props.visible !== true) {\n      return null;\n    }\n\n    const containerStyles = {\n      backgroundColor:\n        this.props.transparent === true ? 'transparent' : 'white',\n    };\n\n    let animationType = this.props.animationType || 'none';\n\n    let presentationStyle = this.props.presentationStyle;\n    if (!presentationStyle) {\n      presentationStyle = 'fullScreen';\n      if (this.props.transparent === true) {\n        presentationStyle = 'overFullScreen';\n      }\n    }\n\n    const innerChildren = __DEV__ ? (\n      <AppContainer rootTag={this.context}>{this.props.children}</AppContainer>\n    ) : (\n      this.props.children\n    );\n\n    return (\n      <RCTModalHostView\n        animationType={animationType}\n        presentationStyle={presentationStyle}\n        transparent={this.props.transparent}\n        hardwareAccelerated={this.props.hardwareAccelerated}\n        onRequestClose={this.props.onRequestClose}\n        onShow={this.props.onShow}\n        onDismiss={() => {\n          if (this.props.onDismiss) {\n            this.props.onDismiss();\n          }\n        }}\n        visible={this.props.visible}\n        statusBarTranslucent={this.props.statusBarTranslucent}\n        identifier={this._identifier}\n        style={styles.modal}\n        // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n        onStartShouldSetResponder={this._shouldSetResponder}\n        supportedOrientations={this.props.supportedOrientations}\n        onOrientationChange={this.props.onOrientationChange}>\n        <VirtualizedListContextResetter>\n          <ScrollView.Context.Provider value={null}>\n            <View\n              style={[styles.container, containerStyles]}\n              collapsable={false}>\n              {innerChildren}\n            </View>\n          </ScrollView.Context.Provider>\n        </VirtualizedListContextResetter>\n      </RCTModalHostView>\n    );\n  }\n\n  // We don't want any responder events bubbling out of the modal.\n  _shouldSetResponder(): boolean {\n    return true;\n  }\n}\n\nconst side = I18nManager.getConstants().isRTL ? 'right' : 'left';\nconst styles = StyleSheet.create({\n  modal: {\n    position: 'absolute',\n  },\n  container: {\n    /* $FlowFixMe[invalid-computed-prop] (>=0.111.0 site=react_native_fb) This\n     * comment suppresses an error found when Flow v0.111 was deployed. To see\n     * the error, delete this comment and run Flow. */\n    [side]: 0,\n    top: 0,\n    flex: 1,\n  },\n});\n\nconst ExportedModal: React.AbstractComponent<\n  React.ElementConfig<typeof Modal>,\n> = ModalInjection.unstable_Modal ?? Modal;\n\nmodule.exports = ExportedModal;\n"]},"metadata":{},"sourceType":"script"}