{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _Platform = _interopRequireDefault(require(\"../../Utilities/Platform\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _StyleSheet = _interopRequireDefault(require(\"../../StyleSheet/StyleSheet\"));\n\nvar _useMergeRefs = _interopRequireDefault(require(\"../../Utilities/useMergeRefs\"));\n\nvar _AndroidSwitchNativeComponent = _interopRequireWildcard(require(\"./AndroidSwitchNativeComponent\"));\n\nvar _SwitchNativeComponent = _interopRequireWildcard(require(\"./SwitchNativeComponent\"));\n\nvar _jsxFileName = \"D:\\\\vsCodes\\\\friday\\\\personal_assist\\\\node_modules\\\\react-native\\\\Libraries\\\\Components\\\\Switch\\\\Switch.js\";\nvar _excluded = [\"disabled\", \"ios_backgroundColor\", \"onChange\", \"onValueChange\", \"style\", \"thumbColor\", \"trackColor\", \"value\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar returnsFalse = function returnsFalse() {\n  return false;\n};\n\nvar returnsTrue = function returnsTrue() {\n  return true;\n};\n\nvar SwitchWithForwardedRef = React.forwardRef(function Switch(props, forwardedRef) {\n  var disabled = props.disabled,\n      ios_backgroundColor = props.ios_backgroundColor,\n      onChange = props.onChange,\n      onValueChange = props.onValueChange,\n      style = props.style,\n      thumbColor = props.thumbColor,\n      trackColor = props.trackColor,\n      value = props.value,\n      restProps = (0, _objectWithoutProperties2.default)(props, _excluded);\n  var trackColorForFalse = trackColor == null ? void 0 : trackColor.false;\n  var trackColorForTrue = trackColor == null ? void 0 : trackColor.true;\n  var nativeSwitchRef = React.useRef(null);\n  var ref = (0, _useMergeRefs.default)(nativeSwitchRef, forwardedRef);\n\n  var _React$useState = React.useState({\n    value: null\n  }),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      native = _React$useState2[0],\n      setNative = _React$useState2[1];\n\n  var handleChange = function handleChange(event) {\n    onChange == null ? void 0 : onChange(event);\n    onValueChange == null ? void 0 : onValueChange(event.nativeEvent.value);\n    setNative({\n      value: event.nativeEvent.value\n    });\n  };\n\n  React.useLayoutEffect(function () {\n    var _nativeSwitchRef$curr;\n\n    var jsValue = value === true;\n    var shouldUpdateNativeSwitch = native.value !== jsValue;\n\n    if (shouldUpdateNativeSwitch && ((_nativeSwitchRef$curr = nativeSwitchRef.current) == null ? void 0 : _nativeSwitchRef$curr.setNativeProps) != null) {\n      if (_Platform.default.OS === 'android') {\n        _AndroidSwitchNativeComponent.Commands.setNativeValue(nativeSwitchRef.current, jsValue);\n      } else {\n        _SwitchNativeComponent.Commands.setValue(nativeSwitchRef.current, jsValue);\n      }\n    }\n  }, [value, native]);\n\n  if (_Platform.default.OS === 'android') {\n    var _props$accessibilityR;\n\n    var platformProps = {\n      enabled: disabled !== true,\n      on: value === true,\n      style: style,\n      thumbTintColor: thumbColor,\n      trackColorForFalse: trackColorForFalse,\n      trackColorForTrue: trackColorForTrue,\n      trackTintColor: value === true ? trackColorForTrue : trackColorForFalse\n    };\n    return React.createElement(_AndroidSwitchNativeComponent.default, (0, _extends2.default)({}, restProps, platformProps, {\n      accessibilityRole: (_props$accessibilityR = props.accessibilityRole) != null ? _props$accessibilityR : 'switch',\n      onChange: handleChange,\n      onResponderTerminationRequest: returnsFalse,\n      onStartShouldSetResponder: returnsTrue,\n      ref: ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 7\n      }\n    }));\n  } else {\n    var _props$accessibilityR2;\n\n    var _platformProps = {\n      disabled: disabled,\n      onTintColor: trackColorForTrue,\n      style: _StyleSheet.default.compose({\n        height: 31,\n        width: 51\n      }, _StyleSheet.default.compose(style, ios_backgroundColor == null ? null : {\n        backgroundColor: ios_backgroundColor,\n        borderRadius: 16\n      })),\n      thumbTintColor: thumbColor,\n      tintColor: trackColorForFalse,\n      value: value === true\n    };\n    return React.createElement(_SwitchNativeComponent.default, (0, _extends2.default)({}, restProps, _platformProps, {\n      accessibilityRole: (_props$accessibilityR2 = props.accessibilityRole) != null ? _props$accessibilityR2 : 'switch',\n      onChange: handleChange,\n      onResponderTerminationRequest: returnsFalse,\n      onStartShouldSetResponder: returnsTrue,\n      ref: ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 7\n      }\n    }));\n  }\n});\nvar _default = SwitchWithForwardedRef;\nexports.default = _default;","map":{"version":3,"sources":["D:/vsCodes/friday/personal_assist/node_modules/react-native/Libraries/Components/Switch/Switch.js"],"names":["returnsFalse","returnsTrue","SwitchWithForwardedRef","React","forwardRef","Switch","props","forwardedRef","disabled","ios_backgroundColor","onChange","onValueChange","style","thumbColor","trackColor","value","restProps","trackColorForFalse","false","trackColorForTrue","true","nativeSwitchRef","useRef","ref","useState","native","setNative","handleChange","event","nativeEvent","useLayoutEffect","jsValue","shouldUpdateNativeSwitch","current","setNativeProps","Platform","OS","AndroidSwitchCommands","setNativeValue","SwitchCommands","setValue","platformProps","enabled","on","thumbTintColor","trackTintColor","accessibilityRole","onTintColor","StyleSheet","compose","height","width","backgroundColor","borderRadius","tintColor"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n * @generate-docs\n */\n\nimport Platform from '../../Utilities/Platform';\nimport * as React from 'react';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport useMergeRefs from '../../Utilities/useMergeRefs';\n\nimport AndroidSwitchNativeComponent, {\n  Commands as AndroidSwitchCommands,\n} from './AndroidSwitchNativeComponent';\nimport SwitchNativeComponent, {\n  Commands as SwitchCommands,\n} from './SwitchNativeComponent';\n\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {SyntheticEvent} from '../../Types/CoreEventTypes';\nimport type {ViewProps} from '../View/ViewPropTypes';\n\ntype SwitchChangeEvent = SyntheticEvent<\n  $ReadOnly<{|\n    value: boolean,\n  |}>,\n>;\n\nexport type Props = $ReadOnly<{|\n  ...ViewProps,\n\n  /**\n    If true the user won't be able to toggle the switch.\n\n    @default false\n   */\n  disabled?: ?boolean,\n\n  /**\n    The value of the switch. If true the switch will be turned on.\n\n    @default false\n   */\n  value?: ?boolean,\n\n  /**\n    Color of the foreground switch grip. If this is set on iOS, the switch grip will lose its drop shadow.\n   */\n  thumbColor?: ?ColorValue,\n\n  /**\n    Custom colors for the switch track.\n\n    _iOS_: When the switch value is false, the track shrinks into the border. If you want to change the\n    color of the background exposed by the shrunken track, use\n     [`ios_backgroundColor`](https://reactnative.dev/docs/switch#ios_backgroundColor).\n   */\n  trackColor?: ?$ReadOnly<{|\n    false?: ?ColorValue,\n    true?: ?ColorValue,\n  |}>,\n\n  /**\n    On iOS, custom color for the background. This background color can be\n    seen either when the switch value is false or when the switch is\n    disabled (and the switch is translucent).\n   */\n  ios_backgroundColor?: ?ColorValue,\n\n  /**\n    Invoked when the user tries to change the value of the switch. Receives\n    the change event as an argument. If you want to only receive the new\n    value, use `onValueChange` instead.\n   */\n  onChange?: ?(event: SwitchChangeEvent) => Promise<void> | void,\n\n  /**\n    Invoked when the user tries to change the value of the switch. Receives\n    the new value as an argument. If you want to instead receive an event,\n    use `onChange`.\n   */\n  onValueChange?: ?(value: boolean) => Promise<void> | void,\n|}>;\nconst returnsFalse = () => false;\nconst returnsTrue = () => true;\n\n/**\n  Renders a boolean input.\n\n  This is a controlled component that requires an `onValueChange`\n  callback that updates the `value` prop in order for the component to\n  reflect user actions. If the `value` prop is not updated, the\n  component will continue to render the supplied `value` prop instead of\n  the expected result of any user actions.\n\n  ```SnackPlayer name=Switch\n  import React, { useState } from \"react\";\n  import { View, Switch, StyleSheet } from \"react-native\";\n\n  const App = () => {\n    const [isEnabled, setIsEnabled] = useState(false);\n    const toggleSwitch = () => setIsEnabled(previousState => !previousState);\n\n    return (\n      <View style={styles.container}>\n        <Switch\n          trackColor={{ false: \"#767577\", true: \"#81b0ff\" }}\n          thumbColor={isEnabled ? \"#f5dd4b\" : \"#f4f3f4\"}\n          ios_backgroundColor=\"#3e3e3e\"\n          onValueChange={toggleSwitch}\n          value={isEnabled}\n        />\n      </View>\n    );\n  }\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    }\n  });\n\n  export default App;\n  ```\n */\n\nconst SwitchWithForwardedRef: React.AbstractComponent<\n  Props,\n  React.ElementRef<\n    typeof SwitchNativeComponent | typeof AndroidSwitchNativeComponent,\n  >,\n> = React.forwardRef(function Switch(props, forwardedRef): React.Node {\n  const {\n    disabled,\n    ios_backgroundColor,\n    onChange,\n    onValueChange,\n    style,\n    thumbColor,\n    trackColor,\n    value,\n    ...restProps\n  } = props;\n  const trackColorForFalse = trackColor?.false;\n  const trackColorForTrue = trackColor?.true;\n\n  const nativeSwitchRef = React.useRef<React.ElementRef<\n    typeof SwitchNativeComponent | typeof AndroidSwitchNativeComponent,\n  > | null>(null);\n\n  const ref = useMergeRefs(nativeSwitchRef, forwardedRef);\n\n  const [native, setNative] = React.useState({value: null});\n\n  const handleChange = (event: SwitchChangeEvent) => {\n    onChange?.(event);\n    onValueChange?.(event.nativeEvent.value);\n    setNative({value: event.nativeEvent.value});\n  };\n\n  React.useLayoutEffect(() => {\n    // This is necessary in case native updates the switch and JS decides\n    // that the update should be ignored and we should stick with the value\n    // that we have in JS.\n    const jsValue = value === true;\n    const shouldUpdateNativeSwitch = native.value !== jsValue;\n    if (\n      shouldUpdateNativeSwitch &&\n      nativeSwitchRef.current?.setNativeProps != null\n    ) {\n      if (Platform.OS === 'android') {\n        AndroidSwitchCommands.setNativeValue(nativeSwitchRef.current, jsValue);\n      } else {\n        SwitchCommands.setValue(nativeSwitchRef.current, jsValue);\n      }\n    }\n  }, [value, native]);\n\n  if (Platform.OS === 'android') {\n    const platformProps = {\n      enabled: disabled !== true,\n      on: value === true,\n      style,\n      thumbTintColor: thumbColor,\n      trackColorForFalse: trackColorForFalse,\n      trackColorForTrue: trackColorForTrue,\n      trackTintColor: value === true ? trackColorForTrue : trackColorForFalse,\n    };\n\n    return (\n      <AndroidSwitchNativeComponent\n        {...restProps}\n        {...platformProps}\n        accessibilityRole={props.accessibilityRole ?? 'switch'}\n        onChange={handleChange}\n        onResponderTerminationRequest={returnsFalse}\n        onStartShouldSetResponder={returnsTrue}\n        ref={ref}\n      />\n    );\n  } else {\n    const platformProps = {\n      disabled,\n      onTintColor: trackColorForTrue,\n      style: StyleSheet.compose(\n        {height: 31, width: 51},\n        StyleSheet.compose(\n          style,\n          ios_backgroundColor == null\n            ? null\n            : {\n                backgroundColor: ios_backgroundColor,\n                borderRadius: 16,\n              },\n        ),\n      ),\n      thumbTintColor: thumbColor,\n      tintColor: trackColorForFalse,\n      value: value === true,\n    };\n\n    return (\n      <SwitchNativeComponent\n        {...restProps}\n        {...platformProps}\n        accessibilityRole={props.accessibilityRole ?? 'switch'}\n        onChange={handleChange}\n        onResponderTerminationRequest={returnsFalse}\n        onStartShouldSetResponder={returnsTrue}\n        ref={ref}\n      />\n    );\n  }\n});\n\nexport default SwitchWithForwardedRef;\n"]},"metadata":{},"sourceType":"script"}