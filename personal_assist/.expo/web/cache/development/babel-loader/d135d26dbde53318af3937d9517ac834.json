{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _Platform = _interopRequireDefault(require(\"../Utilities/Platform\"));\n\nvar _StyleSheet = _interopRequireDefault(require(\"../StyleSheet/StyleSheet\"));\n\nvar _Text = _interopRequireDefault(require(\"../Text/Text\"));\n\nvar _TouchableNativeFeedback = _interopRequireDefault(require(\"./Touchable/TouchableNativeFeedback\"));\n\nvar _TouchableOpacity = _interopRequireDefault(require(\"./Touchable/TouchableOpacity\"));\n\nvar _View = _interopRequireDefault(require(\"./View/View\"));\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar _jsxFileName = \"D:\\\\vsCodes\\\\friday\\\\personal_assist\\\\node_modules\\\\react-native\\\\Libraries\\\\Components\\\\Button.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Button = function (_React$Component) {\n  (0, _inherits2.default)(Button, _React$Component);\n\n  var _super = _createSuper(Button);\n\n  function Button() {\n    (0, _classCallCheck2.default)(this, Button);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(Button, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props$accessibi, _this$props$accessibi2;\n\n      var _this$props = this.props,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          color = _this$props.color,\n          onPress = _this$props.onPress,\n          touchSoundDisabled = _this$props.touchSoundDisabled,\n          title = _this$props.title,\n          hasTVPreferredFocus = _this$props.hasTVPreferredFocus,\n          nextFocusDown = _this$props.nextFocusDown,\n          nextFocusForward = _this$props.nextFocusForward,\n          nextFocusLeft = _this$props.nextFocusLeft,\n          nextFocusRight = _this$props.nextFocusRight,\n          nextFocusUp = _this$props.nextFocusUp,\n          testID = _this$props.testID,\n          accessible = _this$props.accessible,\n          accessibilityActions = _this$props.accessibilityActions,\n          onAccessibilityAction = _this$props.onAccessibilityAction;\n      var buttonStyles = [styles.button];\n      var textStyles = [styles.text];\n\n      if (color) {\n        if (_Platform.default.OS === 'ios') {\n          textStyles.push({\n            color: color\n          });\n        } else {\n          buttonStyles.push({\n            backgroundColor: color\n          });\n        }\n      }\n\n      var disabled = this.props.disabled != null ? this.props.disabled : (_this$props$accessibi = this.props.accessibilityState) == null ? void 0 : _this$props$accessibi.disabled;\n      var accessibilityState = disabled !== ((_this$props$accessibi2 = this.props.accessibilityState) == null ? void 0 : _this$props$accessibi2.disabled) ? (0, _extends2.default)({}, this.props.accessibilityState, {\n        disabled: disabled\n      }) : this.props.accessibilityState;\n\n      if (disabled) {\n        buttonStyles.push(styles.buttonDisabled);\n        textStyles.push(styles.textDisabled);\n      }\n\n      (0, _invariant.default)(typeof title === 'string', 'The title prop of a Button must be a string');\n      var formattedTitle = _Platform.default.OS === 'android' ? title.toUpperCase() : title;\n      var Touchable = _Platform.default.OS === 'android' ? _TouchableNativeFeedback.default : _TouchableOpacity.default;\n      return React.createElement(Touchable, {\n        accessible: accessible,\n        accessibilityActions: accessibilityActions,\n        onAccessibilityAction: onAccessibilityAction,\n        accessibilityLabel: accessibilityLabel,\n        accessibilityRole: \"button\",\n        accessibilityState: accessibilityState,\n        hasTVPreferredFocus: hasTVPreferredFocus,\n        nextFocusDown: nextFocusDown,\n        nextFocusForward: nextFocusForward,\n        nextFocusLeft: nextFocusLeft,\n        nextFocusRight: nextFocusRight,\n        nextFocusUp: nextFocusUp,\n        testID: testID,\n        disabled: disabled,\n        onPress: onPress,\n        touchSoundDisabled: touchSoundDisabled,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 7\n        }\n      }, React.createElement(_View.default, {\n        style: buttonStyles,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 9\n        }\n      }, React.createElement(_Text.default, {\n        style: textStyles,\n        disabled: disabled,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 11\n        }\n      }, formattedTitle)));\n    }\n  }]);\n  return Button;\n}(React.Component);\n\nvar styles = _StyleSheet.default.create({\n  button: _Platform.default.select({\n    ios: {},\n    android: {\n      elevation: 4,\n      backgroundColor: '#2196F3',\n      borderRadius: 2\n    }\n  }),\n  text: (0, _extends2.default)({\n    textAlign: 'center',\n    margin: 8\n  }, _Platform.default.select({\n    ios: {\n      color: '#007AFF',\n      fontSize: 18\n    },\n    android: {\n      color: 'white',\n      fontWeight: '500'\n    }\n  })),\n  buttonDisabled: _Platform.default.select({\n    ios: {},\n    android: {\n      elevation: 0,\n      backgroundColor: '#dfdfdf'\n    }\n  }),\n  textDisabled: _Platform.default.select({\n    ios: {\n      color: '#cdcdcd'\n    },\n    android: {\n      color: '#a1a1a1'\n    }\n  })\n});\n\nmodule.exports = Button;","map":{"version":3,"sources":["D:/vsCodes/friday/personal_assist/node_modules/react-native/Libraries/Components/Button.js"],"names":["Button","props","accessibilityLabel","color","onPress","touchSoundDisabled","title","hasTVPreferredFocus","nextFocusDown","nextFocusForward","nextFocusLeft","nextFocusRight","nextFocusUp","testID","accessible","accessibilityActions","onAccessibilityAction","buttonStyles","styles","button","textStyles","text","Platform","OS","push","backgroundColor","disabled","accessibilityState","buttonDisabled","textDisabled","formattedTitle","toUpperCase","Touchable","TouchableNativeFeedback","TouchableOpacity","React","Component","StyleSheet","create","select","ios","android","elevation","borderRadius","textAlign","margin","fontSize","fontWeight","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n * @generate-docs\n */\n\n'use strict';\n\nimport * as React from 'react';\nimport Platform from '../Utilities/Platform';\nimport StyleSheet, {type ColorValue} from '../StyleSheet/StyleSheet';\nimport Text from '../Text/Text';\nimport TouchableNativeFeedback from './Touchable/TouchableNativeFeedback';\nimport TouchableOpacity from './Touchable/TouchableOpacity';\nimport View from './View/View';\nimport invariant from 'invariant';\n\nimport type {\n  AccessibilityState,\n  AccessibilityActionEvent,\n  AccessibilityActionInfo,\n} from './View/ViewAccessibility';\nimport type {PressEvent} from '../Types/CoreEventTypes';\n\ntype ButtonProps = $ReadOnly<{|\n  /**\n    Text to display inside the button. On Android the given title will be\n    converted to the uppercased form.\n   */\n  title: string,\n\n  /**\n    Handler to be called when the user taps the button. The first function\n    argument is an event in form of [PressEvent](pressevent).\n   */\n  onPress: (event?: PressEvent) => mixed,\n\n  /**\n    If `true`, doesn't play system sound on touch.\n\n    @platform android\n\n    @default false\n   */\n  touchSoundDisabled?: ?boolean,\n\n  /**\n    Color of the text (iOS), or background color of the button (Android).\n\n    @default {@platform android} '#2196F3'\n    @default {@platform ios} '#007AFF'\n   */\n  color?: ?ColorValue,\n\n  /**\n    TV preferred focus.\n\n    @platform tv\n\n    @default false\n   */\n  hasTVPreferredFocus?: ?boolean,\n\n  /**\n    Designates the next view to receive focus when the user navigates down. See\n    the [Android documentation][android:nextFocusDown].\n\n    [android:nextFocusDown]:\n    https://developer.android.com/reference/android/view/View.html#attr_android:nextFocusDown\n\n    @platform android, tv\n   */\n  nextFocusDown?: ?number,\n\n  /**\n    Designates the next view to receive focus when the user navigates forward.\n    See the [Android documentation][android:nextFocusForward].\n\n    [android:nextFocusForward]:\n    https://developer.android.com/reference/android/view/View.html#attr_android:nextFocusForward\n\n    @platform android, tv\n   */\n  nextFocusForward?: ?number,\n\n  /**\n    Designates the next view to receive focus when the user navigates left. See\n    the [Android documentation][android:nextFocusLeft].\n\n    [android:nextFocusLeft]:\n    https://developer.android.com/reference/android/view/View.html#attr_android:nextFocusLeft\n\n    @platform android, tv\n   */\n  nextFocusLeft?: ?number,\n\n  /**\n    Designates the next view to receive focus when the user navigates right. See\n    the [Android documentation][android:nextFocusRight].\n\n    [android:nextFocusRight]:\n    https://developer.android.com/reference/android/view/View.html#attr_android:nextFocusRight\n\n    @platform android, tv\n   */\n  nextFocusRight?: ?number,\n\n  /**\n    Designates the next view to receive focus when the user navigates up. See\n    the [Android documentation][android:nextFocusUp].\n\n    [android:nextFocusUp]:\n    https://developer.android.com/reference/android/view/View.html#attr_android:nextFocusUp\n\n    @platform android, tv\n   */\n  nextFocusUp?: ?number,\n\n  /**\n    Text to display for blindness accessibility features.\n   */\n  accessibilityLabel?: ?string,\n\n  /**\n    If `true`, disable all interactions for this component.\n\n    @default false\n   */\n  disabled?: ?boolean,\n\n  /**\n    Used to locate this view in end-to-end tests.\n   */\n  testID?: ?string,\n\n  /**\n   * Accessibility props.\n   */\n  accessible?: ?boolean,\n  accessibilityActions?: ?$ReadOnlyArray<AccessibilityActionInfo>,\n  onAccessibilityAction?: ?(event: AccessibilityActionEvent) => mixed,\n  accessibilityState?: ?AccessibilityState,\n|}>;\n\n/**\n  A basic button component that should render nicely on any platform. Supports a\n  minimal level of customization.\n\n  If this button doesn't look right for your app, you can build your own button\n  using [TouchableOpacity](touchableopacity) or\n  [TouchableWithoutFeedback](touchablewithoutfeedback). For inspiration, look at\n  the [source code for this button component][button:source]. Or, take a look at\n  the [wide variety of button components built by the community]\n  [button:examples].\n\n  [button:source]:\n  https://github.com/facebook/react-native/blob/HEAD/Libraries/Components/Button.js\n\n  [button:examples]:\n  https://js.coach/?menu%5Bcollections%5D=React%20Native&page=1&query=button\n\n  ```jsx\n  <Button\n    onPress={onPressLearnMore}\n    title=\"Learn More\"\n    color=\"#841584\"\n    accessibilityLabel=\"Learn more about this purple button\"\n  />\n  ```\n\n  ```SnackPlayer name=Button%20Example\n  import React from 'react';\n  import { StyleSheet, Button, View, SafeAreaView, Text, Alert } from 'react-native';\n\n  const Separator = () => (\n    <View style={styles.separator} />\n  );\n\n  const App = () => (\n    <SafeAreaView style={styles.container}>\n      <View>\n        <Text style={styles.title}>\n          The title and onPress handler are required. It is recommended to set accessibilityLabel to help make your app usable by everyone.\n        </Text>\n        <Button\n          title=\"Press me\"\n          onPress={() => Alert.alert('Simple Button pressed')}\n        />\n      </View>\n      <Separator />\n      <View>\n        <Text style={styles.title}>\n          Adjust the color in a way that looks standard on each platform. On  iOS, the color prop controls the color of the text. On Android, the color adjusts the background color of the button.\n        </Text>\n        <Button\n          title=\"Press me\"\n          color=\"#f194ff\"\n          onPress={() => Alert.alert('Button with adjusted color pressed')}\n        />\n      </View>\n      <Separator />\n      <View>\n        <Text style={styles.title}>\n          All interaction for the component are disabled.\n        </Text>\n        <Button\n          title=\"Press me\"\n          disabled\n          onPress={() => Alert.alert('Cannot press this one')}\n        />\n      </View>\n      <Separator />\n      <View>\n        <Text style={styles.title}>\n          This layout strategy lets the title define the width of the button.\n        </Text>\n        <View style={styles.fixToText}>\n          <Button\n            title=\"Left button\"\n            onPress={() => Alert.alert('Left button pressed')}\n          />\n          <Button\n            title=\"Right button\"\n            onPress={() => Alert.alert('Right button pressed')}\n          />\n        </View>\n      </View>\n    </SafeAreaView>\n  );\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      justifyContent: 'center',\n      marginHorizontal: 16,\n    },\n    title: {\n      textAlign: 'center',\n      marginVertical: 8,\n    },\n    fixToText: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n    separator: {\n      marginVertical: 8,\n      borderBottomColor: '#737373',\n      borderBottomWidth: StyleSheet.hairlineWidth,\n    },\n  });\n\n  export default App;\n  ```\n */\n\nclass Button extends React.Component<ButtonProps> {\n  render(): React.Node {\n    const {\n      accessibilityLabel,\n      color,\n      onPress,\n      touchSoundDisabled,\n      title,\n      hasTVPreferredFocus,\n      nextFocusDown,\n      nextFocusForward,\n      nextFocusLeft,\n      nextFocusRight,\n      nextFocusUp,\n      testID,\n      accessible,\n      accessibilityActions,\n      onAccessibilityAction,\n    } = this.props;\n    const buttonStyles = [styles.button];\n    const textStyles = [styles.text];\n    if (color) {\n      if (Platform.OS === 'ios') {\n        textStyles.push({color: color});\n      } else {\n        buttonStyles.push({backgroundColor: color});\n      }\n    }\n\n    const disabled =\n      this.props.disabled != null\n        ? this.props.disabled\n        : this.props.accessibilityState?.disabled;\n\n    const accessibilityState =\n      disabled !== this.props.accessibilityState?.disabled\n        ? {...this.props.accessibilityState, disabled}\n        : this.props.accessibilityState;\n\n    if (disabled) {\n      buttonStyles.push(styles.buttonDisabled);\n      textStyles.push(styles.textDisabled);\n    }\n\n    invariant(\n      typeof title === 'string',\n      'The title prop of a Button must be a string',\n    );\n    const formattedTitle =\n      Platform.OS === 'android' ? title.toUpperCase() : title;\n    const Touchable =\n      Platform.OS === 'android' ? TouchableNativeFeedback : TouchableOpacity;\n\n    return (\n      <Touchable\n        accessible={accessible}\n        accessibilityActions={accessibilityActions}\n        onAccessibilityAction={onAccessibilityAction}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityState={accessibilityState}\n        hasTVPreferredFocus={hasTVPreferredFocus}\n        nextFocusDown={nextFocusDown}\n        nextFocusForward={nextFocusForward}\n        nextFocusLeft={nextFocusLeft}\n        nextFocusRight={nextFocusRight}\n        nextFocusUp={nextFocusUp}\n        testID={testID}\n        disabled={disabled}\n        onPress={onPress}\n        touchSoundDisabled={touchSoundDisabled}>\n        <View style={buttonStyles}>\n          <Text style={textStyles} disabled={disabled}>\n            {formattedTitle}\n          </Text>\n        </View>\n      </Touchable>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  button: Platform.select({\n    ios: {},\n    android: {\n      elevation: 4,\n      // Material design blue from https://material.google.com/style/color.html#color-color-palette\n      backgroundColor: '#2196F3',\n      borderRadius: 2,\n    },\n  }),\n  text: {\n    textAlign: 'center',\n    margin: 8,\n    ...Platform.select({\n      ios: {\n        // iOS blue from https://developer.apple.com/ios/human-interface-guidelines/visual-design/color/\n        color: '#007AFF',\n        fontSize: 18,\n      },\n      android: {\n        color: 'white',\n        fontWeight: '500',\n      },\n    }),\n  },\n  buttonDisabled: Platform.select({\n    ios: {},\n    android: {\n      elevation: 0,\n      backgroundColor: '#dfdfdf',\n    },\n  }),\n  textDisabled: Platform.select({\n    ios: {\n      color: '#cdcdcd',\n    },\n    android: {\n      color: '#a1a1a1',\n    },\n  }),\n});\n\nmodule.exports = Button;\n"]},"metadata":{},"sourceType":"script"}