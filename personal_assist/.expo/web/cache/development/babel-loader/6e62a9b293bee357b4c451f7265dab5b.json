{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _DisplayMode = require(\"./DisplayMode\");\n\nvar _createPerformanceLogger = _interopRequireDefault(require(\"../Utilities/createPerformanceLogger\"));\n\nvar _NativeHeadlessJsTaskSupport = _interopRequireDefault(require(\"./NativeHeadlessJsTaskSupport\"));\n\nvar _HeadlessJsTaskError = _interopRequireDefault(require(\"./HeadlessJsTaskError\"));\n\nvar BatchedBridge = require('../BatchedBridge/BatchedBridge');\n\nvar BugReporting = require('../BugReporting/BugReporting');\n\nvar ReactNative = require('../Renderer/shims/ReactNative');\n\nvar SceneTracker = require('../Utilities/SceneTracker');\n\nvar infoLog = require('../Utilities/infoLog');\n\nvar invariant = require('invariant');\n\nvar renderApplication = require('./renderApplication');\n\nvar runnables = {};\nvar runCount = 1;\nvar sections = {};\nvar taskProviders = new Map();\nvar taskCancelProviders = new Map();\n\nvar componentProviderInstrumentationHook = function componentProviderInstrumentationHook(component) {\n  return component();\n};\n\nvar wrapperComponentProvider;\nvar showArchitectureIndicator = false;\nvar AppRegistry = {\n  setWrapperComponentProvider: function setWrapperComponentProvider(provider) {\n    wrapperComponentProvider = provider;\n  },\n  enableArchitectureIndicator: function enableArchitectureIndicator(enabled) {\n    showArchitectureIndicator = enabled;\n  },\n  registerConfig: function registerConfig(config) {\n    config.forEach(function (appConfig) {\n      if (appConfig.run) {\n        AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);\n      } else {\n        invariant(appConfig.component != null, 'AppRegistry.registerConfig(...): Every config is expected to set ' + 'either `run` or `component`, but `%s` has neither.', appConfig.appKey);\n        AppRegistry.registerComponent(appConfig.appKey, appConfig.component, appConfig.section);\n      }\n    });\n  },\n  registerComponent: function registerComponent(appKey, componentProvider, section) {\n    var scopedPerformanceLogger = (0, _createPerformanceLogger.default)();\n    runnables[appKey] = {\n      componentProvider: componentProvider,\n      run: function run(appParameters, displayMode) {\n        renderApplication(componentProviderInstrumentationHook(componentProvider, scopedPerformanceLogger), appParameters.initialProps, appParameters.rootTag, wrapperComponentProvider && wrapperComponentProvider(appParameters), appParameters.fabric, showArchitectureIndicator, scopedPerformanceLogger, appKey === 'LogBox', appKey, (0, _DisplayMode.coerceDisplayMode)(displayMode), appParameters.concurrentRoot);\n      }\n    };\n\n    if (section) {\n      sections[appKey] = runnables[appKey];\n    }\n\n    return appKey;\n  },\n  registerRunnable: function registerRunnable(appKey, run) {\n    runnables[appKey] = {\n      run: run\n    };\n    return appKey;\n  },\n  registerSection: function registerSection(appKey, component) {\n    AppRegistry.registerComponent(appKey, component, true);\n  },\n  getAppKeys: function getAppKeys() {\n    return Object.keys(runnables);\n  },\n  getSectionKeys: function getSectionKeys() {\n    return Object.keys(sections);\n  },\n  getSections: function getSections() {\n    return (0, _extends2.default)({}, sections);\n  },\n  getRunnable: function getRunnable(appKey) {\n    return runnables[appKey];\n  },\n  getRegistry: function getRegistry() {\n    return {\n      sections: AppRegistry.getSectionKeys(),\n      runnables: (0, _extends2.default)({}, runnables)\n    };\n  },\n  setComponentProviderInstrumentationHook: function setComponentProviderInstrumentationHook(hook) {\n    componentProviderInstrumentationHook = hook;\n  },\n  runApplication: function runApplication(appKey, appParameters, displayMode) {\n    if (appKey !== 'LogBox') {\n      var msg = 'Running \"' + appKey + '\" with ' + JSON.stringify(appParameters);\n      infoLog(msg);\n      BugReporting.addSource('AppRegistry.runApplication' + runCount++, function () {\n        return msg;\n      });\n    }\n\n    invariant(runnables[appKey] && runnables[appKey].run, \"\\\"\" + appKey + \"\\\" has not been registered. This can happen if:\\n\" + '* Metro (the local dev server) is run from the wrong folder. ' + 'Check if Metro is running, stop it and restart it in the current project.\\n' + \"* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.\");\n    SceneTracker.setActiveScene({\n      name: appKey\n    });\n    runnables[appKey].run(appParameters, displayMode);\n  },\n  setSurfaceProps: function setSurfaceProps(appKey, appParameters, displayMode) {\n    if (appKey !== 'LogBox') {\n      var msg = 'Updating props for Surface \"' + appKey + '\" with ' + JSON.stringify(appParameters);\n      infoLog(msg);\n      BugReporting.addSource('AppRegistry.setSurfaceProps' + runCount++, function () {\n        return msg;\n      });\n    }\n\n    invariant(runnables[appKey] && runnables[appKey].run, \"\\\"\" + appKey + \"\\\" has not been registered. This can happen if:\\n\" + '* Metro (the local dev server) is run from the wrong folder. ' + 'Check if Metro is running, stop it and restart it in the current project.\\n' + \"* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.\");\n    runnables[appKey].run(appParameters, displayMode);\n  },\n  unmountApplicationComponentAtRootTag: function unmountApplicationComponentAtRootTag(rootTag) {\n    ReactNative.unmountComponentAtNodeAndRemoveContainer(rootTag);\n  },\n  registerHeadlessTask: function registerHeadlessTask(taskKey, taskProvider) {\n    this.registerCancellableHeadlessTask(taskKey, taskProvider, function () {\n      return function () {};\n    });\n  },\n  registerCancellableHeadlessTask: function registerCancellableHeadlessTask(taskKey, taskProvider, taskCancelProvider) {\n    if (taskProviders.has(taskKey)) {\n      console.warn(\"registerHeadlessTask or registerCancellableHeadlessTask called multiple times for same key '\" + taskKey + \"'\");\n    }\n\n    taskProviders.set(taskKey, taskProvider);\n    taskCancelProviders.set(taskKey, taskCancelProvider);\n  },\n  startHeadlessTask: function startHeadlessTask(taskId, taskKey, data) {\n    var taskProvider = taskProviders.get(taskKey);\n\n    if (!taskProvider) {\n      console.warn(\"No task registered for key \" + taskKey);\n\n      if (_NativeHeadlessJsTaskSupport.default) {\n        _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);\n      }\n\n      return;\n    }\n\n    taskProvider()(data).then(function () {\n      if (_NativeHeadlessJsTaskSupport.default) {\n        _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);\n      }\n    }).catch(function (reason) {\n      console.error(reason);\n\n      if (_NativeHeadlessJsTaskSupport.default && reason instanceof _HeadlessJsTaskError.default) {\n        _NativeHeadlessJsTaskSupport.default.notifyTaskRetry(taskId).then(function (retryPosted) {\n          if (!retryPosted) {\n            _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);\n          }\n        });\n      }\n    });\n  },\n  cancelHeadlessTask: function cancelHeadlessTask(taskId, taskKey) {\n    var taskCancelProvider = taskCancelProviders.get(taskKey);\n\n    if (!taskCancelProvider) {\n      throw new Error(\"No task canceller registered for key '\" + taskKey + \"'\");\n    }\n\n    taskCancelProvider()();\n  }\n};\nBatchedBridge.registerCallableModule('AppRegistry', AppRegistry);\n\nif (__DEV__) {\n  var LogBoxInspector = require('../LogBox/LogBoxInspectorContainer').default;\n\n  AppRegistry.registerComponent('LogBox', function () {\n    return LogBoxInspector;\n  });\n} else {\n  AppRegistry.registerComponent('LogBox', function () {\n    return function NoOp() {\n      return null;\n    };\n  });\n}\n\nmodule.exports = AppRegistry;","map":{"version":3,"sources":["D:/vsCodes/friday/personal_assist/node_modules/react-native/Libraries/ReactNative/AppRegistry.js"],"names":["BatchedBridge","require","BugReporting","ReactNative","SceneTracker","infoLog","invariant","renderApplication","runnables","runCount","sections","taskProviders","Map","taskCancelProviders","componentProviderInstrumentationHook","component","wrapperComponentProvider","showArchitectureIndicator","AppRegistry","setWrapperComponentProvider","provider","enableArchitectureIndicator","enabled","registerConfig","config","forEach","appConfig","run","registerRunnable","appKey","registerComponent","section","componentProvider","scopedPerformanceLogger","appParameters","displayMode","initialProps","rootTag","fabric","concurrentRoot","registerSection","getAppKeys","Object","keys","getSectionKeys","getSections","getRunnable","getRegistry","setComponentProviderInstrumentationHook","hook","runApplication","msg","JSON","stringify","addSource","setActiveScene","name","setSurfaceProps","unmountApplicationComponentAtRootTag","unmountComponentAtNodeAndRemoveContainer","registerHeadlessTask","taskKey","taskProvider","registerCancellableHeadlessTask","taskCancelProvider","has","console","warn","set","startHeadlessTask","taskId","data","get","NativeHeadlessJsTaskSupport","notifyTaskFinished","then","catch","reason","error","HeadlessJsTaskError","notifyTaskRetry","retryPosted","cancelHeadlessTask","Error","registerCallableModule","__DEV__","LogBoxInspector","default","NoOp","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nconst BatchedBridge = require('../BatchedBridge/BatchedBridge');\nconst BugReporting = require('../BugReporting/BugReporting');\nconst ReactNative = require('../Renderer/shims/ReactNative');\nconst SceneTracker = require('../Utilities/SceneTracker');\n\nconst infoLog = require('../Utilities/infoLog');\nconst invariant = require('invariant');\nconst renderApplication = require('./renderApplication');\nimport type {IPerformanceLogger} from '../Utilities/createPerformanceLogger';\n\nimport {coerceDisplayMode} from './DisplayMode';\nimport createPerformanceLogger from '../Utilities/createPerformanceLogger';\nimport NativeHeadlessJsTaskSupport from './NativeHeadlessJsTaskSupport';\nimport HeadlessJsTaskError from './HeadlessJsTaskError';\nimport type {RootTag} from 'react-native/Libraries/Types/RootTagTypes';\n\ntype Task = (taskData: any) => Promise<void>;\nexport type TaskProvider = () => Task;\ntype TaskCanceller = () => void;\ntype TaskCancelProvider = () => TaskCanceller;\n\nexport type ComponentProvider = () => React$ComponentType<any>;\nexport type ComponentProviderInstrumentationHook = (\n  component: ComponentProvider,\n  scopedPerformanceLogger: IPerformanceLogger,\n) => React$ComponentType<any>;\nexport type AppConfig = {\n  appKey: string,\n  component?: ComponentProvider,\n  run?: Function,\n  section?: boolean,\n  ...\n};\nexport type Runnable = {\n  component?: ComponentProvider,\n  run: Function,\n  ...\n};\nexport type Runnables = {[appKey: string]: Runnable, ...};\nexport type Registry = {\n  sections: Array<string>,\n  runnables: Runnables,\n  ...\n};\nexport type WrapperComponentProvider = any => React$ComponentType<any>;\n\nconst runnables: Runnables = {};\nlet runCount = 1;\nconst sections: Runnables = {};\nconst taskProviders: Map<string, TaskProvider> = new Map();\nconst taskCancelProviders: Map<string, TaskCancelProvider> = new Map();\nlet componentProviderInstrumentationHook: ComponentProviderInstrumentationHook = (\n  component: ComponentProvider,\n) => component();\n\nlet wrapperComponentProvider: ?WrapperComponentProvider;\nlet showArchitectureIndicator = false;\n\n/**\n * `AppRegistry` is the JavaScript entry point to running all React Native apps.\n *\n * See https://reactnative.dev/docs/appregistry.html\n */\nconst AppRegistry = {\n  setWrapperComponentProvider(provider: WrapperComponentProvider) {\n    wrapperComponentProvider = provider;\n  },\n\n  enableArchitectureIndicator(enabled: boolean): void {\n    showArchitectureIndicator = enabled;\n  },\n\n  registerConfig(config: Array<AppConfig>): void {\n    config.forEach(appConfig => {\n      if (appConfig.run) {\n        AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);\n      } else {\n        invariant(\n          appConfig.component != null,\n          'AppRegistry.registerConfig(...): Every config is expected to set ' +\n            'either `run` or `component`, but `%s` has neither.',\n          appConfig.appKey,\n        );\n        AppRegistry.registerComponent(\n          appConfig.appKey,\n          appConfig.component,\n          appConfig.section,\n        );\n      }\n    });\n  },\n\n  /**\n   * Registers an app's root component.\n   *\n   * See https://reactnative.dev/docs/appregistry.html#registercomponent\n   */\n  registerComponent(\n    appKey: string,\n    componentProvider: ComponentProvider,\n    section?: boolean,\n  ): string {\n    let scopedPerformanceLogger = createPerformanceLogger();\n    runnables[appKey] = {\n      componentProvider,\n      run: (appParameters, displayMode) => {\n        renderApplication(\n          componentProviderInstrumentationHook(\n            componentProvider,\n            scopedPerformanceLogger,\n          ),\n          appParameters.initialProps,\n          appParameters.rootTag,\n          wrapperComponentProvider && wrapperComponentProvider(appParameters),\n          appParameters.fabric,\n          showArchitectureIndicator,\n          scopedPerformanceLogger,\n          appKey === 'LogBox',\n          appKey,\n          coerceDisplayMode(displayMode),\n          appParameters.concurrentRoot,\n        );\n      },\n    };\n    if (section) {\n      sections[appKey] = runnables[appKey];\n    }\n    return appKey;\n  },\n\n  registerRunnable(appKey: string, run: Function): string {\n    runnables[appKey] = {run};\n    return appKey;\n  },\n\n  registerSection(appKey: string, component: ComponentProvider): void {\n    AppRegistry.registerComponent(appKey, component, true);\n  },\n\n  getAppKeys(): Array<string> {\n    return Object.keys(runnables);\n  },\n\n  getSectionKeys(): Array<string> {\n    return Object.keys(sections);\n  },\n\n  getSections(): Runnables {\n    return {\n      ...sections,\n    };\n  },\n\n  getRunnable(appKey: string): ?Runnable {\n    return runnables[appKey];\n  },\n\n  getRegistry(): Registry {\n    return {\n      sections: AppRegistry.getSectionKeys(),\n      runnables: {...runnables},\n    };\n  },\n\n  setComponentProviderInstrumentationHook(\n    hook: ComponentProviderInstrumentationHook,\n  ) {\n    componentProviderInstrumentationHook = hook;\n  },\n\n  /**\n   * Loads the JavaScript bundle and runs the app.\n   *\n   * See https://reactnative.dev/docs/appregistry.html#runapplication\n   */\n  runApplication(\n    appKey: string,\n    appParameters: any,\n    displayMode?: number,\n  ): void {\n    if (appKey !== 'LogBox') {\n      const msg =\n        'Running \"' + appKey + '\" with ' + JSON.stringify(appParameters);\n      infoLog(msg);\n      BugReporting.addSource(\n        'AppRegistry.runApplication' + runCount++,\n        () => msg,\n      );\n    }\n    invariant(\n      runnables[appKey] && runnables[appKey].run,\n      `\"${appKey}\" has not been registered. This can happen if:\\n` +\n        '* Metro (the local dev server) is run from the wrong folder. ' +\n        'Check if Metro is running, stop it and restart it in the current project.\\n' +\n        \"* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.\",\n    );\n\n    SceneTracker.setActiveScene({name: appKey});\n    runnables[appKey].run(appParameters, displayMode);\n  },\n\n  /**\n   * Update initial props for a surface that's already rendered\n   */\n  setSurfaceProps(\n    appKey: string,\n    appParameters: any,\n    displayMode?: number,\n  ): void {\n    if (appKey !== 'LogBox') {\n      const msg =\n        'Updating props for Surface \"' +\n        appKey +\n        '\" with ' +\n        JSON.stringify(appParameters);\n      infoLog(msg);\n      BugReporting.addSource(\n        'AppRegistry.setSurfaceProps' + runCount++,\n        () => msg,\n      );\n    }\n    invariant(\n      runnables[appKey] && runnables[appKey].run,\n      `\"${appKey}\" has not been registered. This can happen if:\\n` +\n        '* Metro (the local dev server) is run from the wrong folder. ' +\n        'Check if Metro is running, stop it and restart it in the current project.\\n' +\n        \"* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.\",\n    );\n\n    runnables[appKey].run(appParameters, displayMode);\n  },\n\n  /**\n   * Stops an application when a view should be destroyed.\n   *\n   * See https://reactnative.dev/docs/appregistry.html#unmountapplicationcomponentatroottag\n   */\n  unmountApplicationComponentAtRootTag(rootTag: RootTag): void {\n    // NOTE: RootTag type\n    // $FlowFixMe[incompatible-call] RootTag: RootTag is incompatible with number, needs an updated synced version of the ReactNativeTypes.js file\n    ReactNative.unmountComponentAtNodeAndRemoveContainer(rootTag);\n  },\n\n  /**\n   * Register a headless task. A headless task is a bit of code that runs without a UI.\n   *\n   * See https://reactnative.dev/docs/appregistry.html#registerheadlesstask\n   */\n  registerHeadlessTask(taskKey: string, taskProvider: TaskProvider): void {\n    // $FlowFixMe[object-this-reference]\n    this.registerCancellableHeadlessTask(taskKey, taskProvider, () => () => {\n      /* Cancel is no-op */\n    });\n  },\n\n  /**\n   * Register a cancellable headless task. A headless task is a bit of code that runs without a UI.\n   *\n   * See https://reactnative.dev/docs/appregistry.html#registercancellableheadlesstask\n   */\n  registerCancellableHeadlessTask(\n    taskKey: string,\n    taskProvider: TaskProvider,\n    taskCancelProvider: TaskCancelProvider,\n  ): void {\n    if (taskProviders.has(taskKey)) {\n      console.warn(\n        `registerHeadlessTask or registerCancellableHeadlessTask called multiple times for same key '${taskKey}'`,\n      );\n    }\n    taskProviders.set(taskKey, taskProvider);\n    taskCancelProviders.set(taskKey, taskCancelProvider);\n  },\n\n  /**\n   * Only called from native code. Starts a headless task.\n   *\n   * See https://reactnative.dev/docs/appregistry.html#startheadlesstask\n   */\n  startHeadlessTask(taskId: number, taskKey: string, data: any): void {\n    const taskProvider = taskProviders.get(taskKey);\n    if (!taskProvider) {\n      console.warn(`No task registered for key ${taskKey}`);\n      if (NativeHeadlessJsTaskSupport) {\n        NativeHeadlessJsTaskSupport.notifyTaskFinished(taskId);\n      }\n      return;\n    }\n    taskProvider()(data)\n      .then(() => {\n        if (NativeHeadlessJsTaskSupport) {\n          NativeHeadlessJsTaskSupport.notifyTaskFinished(taskId);\n        }\n      })\n      .catch(reason => {\n        console.error(reason);\n\n        if (\n          NativeHeadlessJsTaskSupport &&\n          reason instanceof HeadlessJsTaskError\n        ) {\n          NativeHeadlessJsTaskSupport.notifyTaskRetry(taskId).then(\n            retryPosted => {\n              if (!retryPosted) {\n                NativeHeadlessJsTaskSupport.notifyTaskFinished(taskId);\n              }\n            },\n          );\n        }\n      });\n  },\n\n  /**\n   * Only called from native code. Cancels a headless task.\n   *\n   * See https://reactnative.dev/docs/appregistry.html#cancelheadlesstask\n   */\n  cancelHeadlessTask(taskId: number, taskKey: string): void {\n    const taskCancelProvider = taskCancelProviders.get(taskKey);\n    if (!taskCancelProvider) {\n      throw new Error(`No task canceller registered for key '${taskKey}'`);\n    }\n    taskCancelProvider()();\n  },\n};\n\nBatchedBridge.registerCallableModule('AppRegistry', AppRegistry);\n\nif (__DEV__) {\n  const LogBoxInspector = require('../LogBox/LogBoxInspectorContainer').default;\n  AppRegistry.registerComponent('LogBox', () => LogBoxInspector);\n} else {\n  AppRegistry.registerComponent(\n    'LogBox',\n    () =>\n      function NoOp() {\n        return null;\n      },\n  );\n}\n\nmodule.exports = AppRegistry;\n"]},"metadata":{},"sourceType":"script"}