{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.Commands = void 0;\n\nvar NativeComponentRegistry = _interopRequireWildcard(require(\"../../NativeComponent/NativeComponentRegistry\"));\n\nvar _Platform = _interopRequireDefault(require(\"../../Utilities/Platform\"));\n\nvar _codegenNativeCommands = _interopRequireDefault(require(\"../../Utilities/codegenNativeCommands\"));\n\nvar _ReactNativeViewViewConfigAndroid = _interopRequireDefault(require(\"./ReactNativeViewViewConfigAndroid\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar ViewNativeComponent = NativeComponentRegistry.get('RCTView', function () {\n  return _Platform.default.OS === 'android' ? _ReactNativeViewViewConfigAndroid.default : {\n    uiViewClassName: 'RCTView'\n  };\n});\nvar Commands = (0, _codegenNativeCommands.default)({\n  supportedCommands: ['hotspotUpdate', 'setPressed']\n});\nexports.Commands = Commands;\nvar _default = ViewNativeComponent;\nexports.default = _default;","map":{"version":3,"sources":["D:/vsCodes/friday/personal_assist/node_modules/react-native/Libraries/Components/View/ViewNativeComponent.js"],"names":["ViewNativeComponent","NativeComponentRegistry","get","Platform","OS","ReactNativeViewViewConfigAndroid","uiViewClassName","Commands","supportedCommands"],"mappings":";;;;;;;AAUA;;AAEA;;AACA;;AACA;;AAEA;;;;;;AAEA,IAAMA,mBAAyC,GAAGC,uBAAuB,CAACC,GAAxB,CAChD,SADgD,EAEhD;AAAA,SACEC,kBAASC,EAAT,KAAgB,SAAhB,GACIC,yCADJ,GAEI;AAACC,IAAAA,eAAe,EAAE;AAAlB,GAHN;AAAA,CAFgD,CAAlD;AAoBO,IAAMC,QAAwB,GAAG,oCAAsC;AAC5EC,EAAAA,iBAAiB,EAAE,CAAC,eAAD,EAAkB,YAAlB;AADyD,CAAtC,CAAjC;;eAIQR,mB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport * as NativeComponentRegistry from '../../NativeComponent/NativeComponentRegistry';\nimport {type HostComponent} from '../../Renderer/shims/ReactNativeTypes';\nimport Platform from '../../Utilities/Platform';\nimport codegenNativeCommands from '../../Utilities/codegenNativeCommands';\nimport ReactNativeViewViewConfigAndroid from './ReactNativeViewViewConfigAndroid';\nimport {type ViewProps as Props} from './ViewPropTypes';\nimport * as React from 'react';\n\nconst ViewNativeComponent: HostComponent<Props> = NativeComponentRegistry.get<Props>(\n  'RCTView',\n  () =>\n    Platform.OS === 'android'\n      ? ReactNativeViewViewConfigAndroid\n      : {uiViewClassName: 'RCTView'},\n);\n\ninterface NativeCommands {\n  +hotspotUpdate: (\n    viewRef: React.ElementRef<HostComponent<mixed>>,\n    x: number,\n    y: number,\n  ) => void;\n  +setPressed: (\n    viewRef: React.ElementRef<HostComponent<mixed>>,\n    pressed: boolean,\n  ) => void;\n}\n\nexport const Commands: NativeCommands = codegenNativeCommands<NativeCommands>({\n  supportedCommands: ['hotspotUpdate', 'setPressed'],\n});\n\nexport default ViewNativeComponent;\n\nexport type ViewNativeComponentType = HostComponent<Props>;\n"]},"metadata":{},"sourceType":"script"}