{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _NativeEventEmitter2 = _interopRequireDefault(require(\"../EventEmitter/NativeEventEmitter\"));\n\nvar _InteractionManager = _interopRequireDefault(require(\"../Interaction/InteractionManager\"));\n\nvar _Platform = _interopRequireDefault(require(\"../Utilities/Platform\"));\n\nvar _NativeLinkingManager = _interopRequireDefault(require(\"./NativeLinkingManager\"));\n\nvar _NativeIntentAndroid = _interopRequireDefault(require(\"./NativeIntentAndroid\"));\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar _nullthrows = _interopRequireDefault(require(\"nullthrows\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Linking = function (_NativeEventEmitter) {\n  (0, _inherits2.default)(Linking, _NativeEventEmitter);\n\n  var _super = _createSuper(Linking);\n\n  function Linking() {\n    (0, _classCallCheck2.default)(this, Linking);\n    return _super.call(this, _Platform.default.OS === 'ios' ? (0, _nullthrows.default)(_NativeLinkingManager.default) : undefined);\n  }\n\n  (0, _createClass2.default)(Linking, [{\n    key: \"addEventListener\",\n    value: function addEventListener(eventType, listener, context) {\n      return this.addListener(eventType, listener);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(eventType, listener) {\n      this.removeListener(eventType, listener);\n    }\n  }, {\n    key: \"openURL\",\n    value: function openURL(url) {\n      this._validateURL(url);\n\n      if (_Platform.default.OS === 'android') {\n        return (0, _nullthrows.default)(_NativeIntentAndroid.default).openURL(url);\n      } else {\n        return (0, _nullthrows.default)(_NativeLinkingManager.default).openURL(url);\n      }\n    }\n  }, {\n    key: \"canOpenURL\",\n    value: function canOpenURL(url) {\n      this._validateURL(url);\n\n      if (_Platform.default.OS === 'android') {\n        return (0, _nullthrows.default)(_NativeIntentAndroid.default).canOpenURL(url);\n      } else {\n        return (0, _nullthrows.default)(_NativeLinkingManager.default).canOpenURL(url);\n      }\n    }\n  }, {\n    key: \"openSettings\",\n    value: function openSettings() {\n      if (_Platform.default.OS === 'android') {\n        return (0, _nullthrows.default)(_NativeIntentAndroid.default).openSettings();\n      } else {\n        return (0, _nullthrows.default)(_NativeLinkingManager.default).openSettings();\n      }\n    }\n  }, {\n    key: \"getInitialURL\",\n    value: function getInitialURL() {\n      return _Platform.default.OS === 'android' ? _InteractionManager.default.runAfterInteractions().then(function () {\n        return (0, _nullthrows.default)(_NativeIntentAndroid.default).getInitialURL();\n      }) : (0, _nullthrows.default)(_NativeLinkingManager.default).getInitialURL();\n    }\n  }, {\n    key: \"sendIntent\",\n    value: function sendIntent(action, extras) {\n      if (_Platform.default.OS === 'android') {\n        return (0, _nullthrows.default)(_NativeIntentAndroid.default).sendIntent(action, extras);\n      } else {\n        return new Promise(function (resolve, reject) {\n          return reject(new Error('Unsupported'));\n        });\n      }\n    }\n  }, {\n    key: \"_validateURL\",\n    value: function _validateURL(url) {\n      (0, _invariant.default)(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n      (0, _invariant.default)(url, 'Invalid URL: cannot be empty');\n    }\n  }]);\n  return Linking;\n}(_NativeEventEmitter2.default);\n\nmodule.exports = new Linking();","map":{"version":3,"sources":["D:/vsCodes/friday/personal_assist/node_modules/react-native/Libraries/Linking/Linking.js"],"names":["Linking","Platform","OS","NativeLinkingManager","undefined","eventType","listener","context","addListener","removeListener","url","_validateURL","NativeIntentAndroid","openURL","canOpenURL","openSettings","InteractionManager","runAfterInteractions","then","getInitialURL","action","extras","sendIntent","Promise","resolve","reject","Error","NativeEventEmitter","module","exports"],"mappings":";;;;;;;;;;;;AAWA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;IAYMA,O;;;;;AACJ,qBAAc;AAAA;AAAA,6BACNC,kBAASC,EAAT,KAAgB,KAAhB,GAAwB,yBAAWC,6BAAX,CAAxB,GAA2DC,SADrD;AAEb;;;;WAQD,0BACEC,SADF,EAEEC,QAFF,EAGEC,OAHF,EAIqB;AACnB,aAAO,KAAKC,WAAL,CAAiBH,SAAjB,EAA4BC,QAA5B,CAAP;AACD;;;WAKD,6BACED,SADF,EAEEC,QAFF,EAGQ;AAEN,WAAKG,cAAL,CAAoBJ,SAApB,EAA+BC,QAA/B;AACD;;;WAOD,iBAAQI,GAAR,EAAoC;AAClC,WAAKC,YAAL,CAAkBD,GAAlB;;AACA,UAAIT,kBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,eAAO,yBAAWU,4BAAX,EAAgCC,OAAhC,CAAwCH,GAAxC,CAAP;AACD,OAFD,MAEO;AACL,eAAO,yBAAWP,6BAAX,EAAiCU,OAAjC,CAAyCH,GAAzC,CAAP;AACD;AACF;;;WAOD,oBAAWA,GAAX,EAA0C;AACxC,WAAKC,YAAL,CAAkBD,GAAlB;;AACA,UAAIT,kBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,eAAO,yBAAWU,4BAAX,EAAgCE,UAAhC,CAA2CJ,GAA3C,CAAP;AACD,OAFD,MAEO;AACL,eAAO,yBAAWP,6BAAX,EAAiCW,UAAjC,CAA4CJ,GAA5C,CAAP;AACD;AACF;;;WAOD,wBAA8B;AAC5B,UAAIT,kBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,eAAO,yBAAWU,4BAAX,EAAgCG,YAAhC,EAAP;AACD,OAFD,MAEO;AACL,eAAO,yBAAWZ,6BAAX,EAAiCY,YAAjC,EAAP;AACD;AACF;;;WAQD,yBAAkC;AAChC,aAAOd,kBAASC,EAAT,KAAgB,SAAhB,GACHc,4BAAmBC,oBAAnB,GAA0CC,IAA1C,CAA+C;AAAA,eAC7C,yBAAWN,4BAAX,EAAgCO,aAAhC,EAD6C;AAAA,OAA/C,CADG,GAIH,yBAAWhB,6BAAX,EAAiCgB,aAAjC,EAJJ;AAKD;;;WASD,oBACEC,MADF,EAEEC,MAFF,EAOiB;AACf,UAAIpB,kBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,eAAO,yBAAWU,4BAAX,EAAgCU,UAAhC,CAA2CF,MAA3C,EAAmDC,MAAnD,CAAP;AACD,OAFD,MAEO;AACL,eAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,iBAAqBA,MAAM,CAAC,IAAIC,KAAJ,CAAU,aAAV,CAAD,CAA3B;AAAA,SAAZ,CAAP;AACD;AACF;;;WAED,sBAAahB,GAAb,EAA0B;AACxB,8BACE,OAAOA,GAAP,KAAe,QADjB,EAEE,2CAA2CA,GAF7C;AAIA,8BAAUA,GAAV,EAAe,8BAAf;AACD;;;EAjHmBiB,4B;;AAoHtBC,MAAM,CAACC,OAAP,GAAkB,IAAI7B,OAAJ,EAAlB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport {type EventSubscription} from '../vendor/emitter/EventEmitter';\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport InteractionManager from '../Interaction/InteractionManager';\nimport Platform from '../Utilities/Platform';\nimport NativeLinkingManager from './NativeLinkingManager';\nimport NativeIntentAndroid from './NativeIntentAndroid';\nimport invariant from 'invariant';\nimport nullthrows from 'nullthrows';\n\ntype LinkingEventDefinitions = {\n  url: [{url: string}],\n};\n\n/**\n * `Linking` gives you a general interface to interact with both incoming\n * and outgoing app links.\n *\n * See https://reactnative.dev/docs/linking.html\n */\nclass Linking extends NativeEventEmitter<LinkingEventDefinitions> {\n  constructor() {\n    super(Platform.OS === 'ios' ? nullthrows(NativeLinkingManager) : undefined);\n  }\n\n  /**\n   * Add a handler to Linking changes by listening to the `url` event type\n   * and providing the handler\n   *\n   * See https://reactnative.dev/docs/linking.html#addeventlistener\n   */\n  addEventListener<K: $Keys<LinkingEventDefinitions>>(\n    eventType: K,\n    listener: (...$ElementType<LinkingEventDefinitions, K>) => mixed,\n    context: $FlowFixMe,\n  ): EventSubscription {\n    return this.addListener(eventType, listener);\n  }\n\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addEventListener`.\n   */\n  removeEventListener<K: $Keys<LinkingEventDefinitions>>(\n    eventType: K,\n    listener: (...$ElementType<LinkingEventDefinitions, K>) => mixed,\n  ): void {\n    // NOTE: This will report a deprecation notice via `console.error`.\n    this.removeListener(eventType, listener);\n  }\n\n  /**\n   * Try to open the given `url` with any of the installed apps.\n   *\n   * See https://reactnative.dev/docs/linking.html#openurl\n   */\n  openURL(url: string): Promise<void> {\n    this._validateURL(url);\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).openURL(url);\n    } else {\n      return nullthrows(NativeLinkingManager).openURL(url);\n    }\n  }\n\n  /**\n   * Determine whether or not an installed app can handle a given URL.\n   *\n   * See https://reactnative.dev/docs/linking.html#canopenurl\n   */\n  canOpenURL(url: string): Promise<boolean> {\n    this._validateURL(url);\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).canOpenURL(url);\n    } else {\n      return nullthrows(NativeLinkingManager).canOpenURL(url);\n    }\n  }\n\n  /**\n   * Open app settings.\n   *\n   * See https://reactnative.dev/docs/linking.html#opensettings\n   */\n  openSettings(): Promise<void> {\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).openSettings();\n    } else {\n      return nullthrows(NativeLinkingManager).openSettings();\n    }\n  }\n\n  /**\n   * If the app launch was triggered by an app link,\n   * it will give the link url, otherwise it will give `null`\n   *\n   * See https://reactnative.dev/docs/linking.html#getinitialurl\n   */\n  getInitialURL(): Promise<?string> {\n    return Platform.OS === 'android'\n      ? InteractionManager.runAfterInteractions().then(() =>\n          nullthrows(NativeIntentAndroid).getInitialURL(),\n        )\n      : nullthrows(NativeLinkingManager).getInitialURL();\n  }\n\n  /*\n   * Launch an Android intent with extras (optional)\n   *\n   * @platform android\n   *\n   * See https://reactnative.dev/docs/linking.html#sendintent\n   */\n  sendIntent(\n    action: string,\n    extras?: Array<{\n      key: string,\n      value: string | number | boolean,\n      ...\n    }>,\n  ): Promise<void> {\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).sendIntent(action, extras);\n    } else {\n      return new Promise((resolve, reject) => reject(new Error('Unsupported')));\n    }\n  }\n\n  _validateURL(url: string) {\n    invariant(\n      typeof url === 'string',\n      'Invalid URL: should be a string. Was: ' + url,\n    );\n    invariant(url, 'Invalid URL: cannot be empty');\n  }\n}\n\nmodule.exports = (new Linking(): Linking);\n"]},"metadata":{},"sourceType":"script"}