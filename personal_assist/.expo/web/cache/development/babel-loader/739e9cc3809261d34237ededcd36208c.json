{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _Platform = _interopRequireDefault(require(\"../../Utilities/Platform\"));\n\nvar _StyleSheet = _interopRequireDefault(require(\"../../StyleSheet/StyleSheet\"));\n\nvar _RCTInputAccessoryViewNativeComponent = _interopRequireDefault(require(\"./RCTInputAccessoryViewNativeComponent\"));\n\nvar _jsxFileName = \"D:\\\\vsCodes\\\\friday\\\\personal_assist\\\\node_modules\\\\react-native\\\\Libraries\\\\Components\\\\TextInput\\\\InputAccessoryView.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar InputAccessoryView = function (_React$Component) {\n  (0, _inherits2.default)(InputAccessoryView, _React$Component);\n\n  var _super = _createSuper(InputAccessoryView);\n\n  function InputAccessoryView() {\n    (0, _classCallCheck2.default)(this, InputAccessoryView);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(InputAccessoryView, [{\n    key: \"render\",\n    value: function render() {\n      if (_Platform.default.OS !== 'ios') {\n        console.warn('<InputAccessoryView> is only supported on iOS.');\n      }\n\n      if (React.Children.count(this.props.children) === 0) {\n        return null;\n      }\n\n      return React.createElement(_RCTInputAccessoryViewNativeComponent.default, {\n        style: [this.props.style, styles.container],\n        nativeID: this.props.nativeID,\n        backgroundColor: this.props.backgroundColor,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 7\n        }\n      }, this.props.children);\n    }\n  }]);\n  return InputAccessoryView;\n}(React.Component);\n\nvar styles = _StyleSheet.default.create({\n  container: {\n    position: 'absolute'\n  }\n});\n\nmodule.exports = InputAccessoryView;","map":{"version":3,"sources":["D:/vsCodes/friday/personal_assist/node_modules/react-native/Libraries/Components/TextInput/InputAccessoryView.js"],"names":["InputAccessoryView","Platform","OS","console","warn","React","Children","count","props","children","style","styles","container","nativeID","backgroundColor","Component","StyleSheet","create","position","module","exports"],"mappings":";;;;;;;;;;;;AAUA;;AACA;;AACA;;AAKA;;;;;;;;;;;;IAuEMA,kB;;;;;;;;;;;;WACJ,kBAAqB;AACnB,UAAIC,kBAASC,EAAT,KAAgB,KAApB,EAA2B;AACzBC,QAAAA,OAAO,CAACC,IAAR,CAAa,gDAAb;AACD;;AAED,UAAIC,KAAK,CAACC,QAAN,CAAeC,KAAf,CAAqB,KAAKC,KAAL,CAAWC,QAAhC,MAA8C,CAAlD,EAAqD;AACnD,eAAO,IAAP;AACD;;AAED,aACE,oBAAC,6CAAD;AACE,QAAA,KAAK,EAAE,CAAC,KAAKD,KAAL,CAAWE,KAAZ,EAAmBC,MAAM,CAACC,SAA1B,CADT;AAEE,QAAA,QAAQ,EAAE,KAAKJ,KAAL,CAAWK,QAFvB;AAGE,QAAA,eAAe,EAAE,KAAKL,KAAL,CAAWM,eAH9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIG,KAAKN,KAAL,CAAWC,QAJd,CADF;AAQD;;;EAlB8BJ,KAAK,CAACU,S;;AAqBvC,IAAMJ,MAAM,GAAGK,oBAAWC,MAAX,CAAkB;AAC/BL,EAAAA,SAAS,EAAE;AACTM,IAAAA,QAAQ,EAAE;AADD;AADoB,CAAlB,CAAf;;AAMAC,MAAM,CAACC,OAAP,GAAiBpB,kBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport * as React from 'react';\nimport Platform from '../../Utilities/Platform';\nimport StyleSheet, {\n  type ViewStyleProp,\n  type ColorValue,\n} from '../../StyleSheet/StyleSheet';\n\nimport RCTInputAccessoryViewNativeComponent from './RCTInputAccessoryViewNativeComponent';\n\n/**\n * Note: iOS only\n *\n * A component which enables customization of the keyboard input accessory view.\n * The input accessory view is displayed above the keyboard whenever a TextInput\n * has focus. This component can be used to create custom toolbars.\n *\n * To use this component wrap your custom toolbar with the\n * InputAccessoryView component, and set a nativeID. Then, pass that nativeID\n * as the inputAccessoryViewID of whatever TextInput you desire. A simple\n * example:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, TextInput, InputAccessoryView, Button } from 'react-native';\n *\n * export default class UselessTextInput extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {text: 'Placeholder Text'};\n *   }\n *\n *   render() {\n *     const inputAccessoryViewID = \"uniqueID\";\n *     return (\n *       <View>\n *         <ScrollView keyboardDismissMode=\"interactive\">\n *           <TextInput\n *             style={{\n *               padding: 10,\n *               paddingTop: 50,\n *             }}\n *             inputAccessoryViewID=inputAccessoryViewID\n *             onChangeText={text => this.setState({text})}\n *             value={this.state.text}\n *           />\n *         </ScrollView>\n *         <InputAccessoryView nativeID=inputAccessoryViewID>\n *           <Button\n *             onPress={() => this.setState({text: 'Placeholder Text'})}\n *             title=\"Reset Text\"\n *           />\n *         </InputAccessoryView>\n *       </View>\n *     );\n *   }\n * }\n *\n * // skip this line if using Create React Native App\n * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);\n * ```\n *\n * This component can also be used to create sticky text inputs (text inputs\n * which are anchored to the top of the keyboard). To do this, wrap a\n * TextInput with the InputAccessoryView component, and don't set a nativeID.\n * For an example, look at InputAccessoryViewExample.js in RNTester.\n */\n\ntype Props = $ReadOnly<{|\n  +children: React.Node,\n  /**\n   * An ID which is used to associate this `InputAccessoryView` to\n   * specified TextInput(s).\n   */\n  nativeID?: ?string,\n  style?: ?ViewStyleProp,\n  backgroundColor?: ?ColorValue,\n|}>;\n\nclass InputAccessoryView extends React.Component<Props> {\n  render(): React.Node {\n    if (Platform.OS !== 'ios') {\n      console.warn('<InputAccessoryView> is only supported on iOS.');\n    }\n\n    if (React.Children.count(this.props.children) === 0) {\n      return null;\n    }\n\n    return (\n      <RCTInputAccessoryViewNativeComponent\n        style={[this.props.style, styles.container]}\n        nativeID={this.props.nativeID}\n        backgroundColor={this.props.backgroundColor}>\n        {this.props.children}\n      </RCTInputAccessoryViewNativeComponent>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n  },\n});\n\nmodule.exports = InputAccessoryView;\n"]},"metadata":{},"sourceType":"script"}