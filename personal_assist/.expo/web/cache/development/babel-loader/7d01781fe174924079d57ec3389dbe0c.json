{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _Animated = _interopRequireDefault(require(\"../../Animated/Animated\"));\n\nvar _Easing = _interopRequireDefault(require(\"../../Animated/Easing\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _StyleSheet = _interopRequireDefault(require(\"../../StyleSheet/StyleSheet\"));\n\nvar _Text = _interopRequireDefault(require(\"../../Text/Text\"));\n\nvar _LogBoxButton = _interopRequireDefault(require(\"./LogBoxButton\"));\n\nvar LogBoxStyle = _interopRequireWildcard(require(\"./LogBoxStyle\"));\n\nvar _jsxFileName = \"D:\\\\vsCodes\\\\friday\\\\personal_assist\\\\node_modules\\\\react-native\\\\Libraries\\\\LogBox\\\\UI\\\\LogBoxInspectorSourceMapStatus.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction LogBoxInspectorSourceMapStatus(props) {\n  var _React$useState = React.useState({\n    animation: null,\n    rotate: null\n  }),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (props.status === 'PENDING') {\n      if (state.animation == null) {\n        var animated = new _Animated.default.Value(0);\n\n        var animation = _Animated.default.loop(_Animated.default.timing(animated, {\n          duration: 2000,\n          easing: _Easing.default.linear,\n          toValue: 1,\n          useNativeDriver: true\n        }));\n\n        setState({\n          animation: animation,\n          rotate: animated.interpolate({\n            inputRange: [0, 1],\n            outputRange: ['0deg', '360deg']\n          })\n        });\n        animation.start();\n      }\n    } else {\n      if (state.animation != null) {\n        state.animation.stop();\n        setState({\n          animation: null,\n          rotate: null\n        });\n      }\n    }\n\n    return function () {\n      if (state.animation != null) {\n        state.animation.stop();\n      }\n    };\n  }, [props.status, state.animation]);\n  var image;\n  var color;\n\n  switch (props.status) {\n    case 'FAILED':\n      image = require('./LogBoxImages/alert-triangle.png');\n      color = LogBoxStyle.getErrorColor(1);\n      break;\n\n    case 'PENDING':\n      image = require('./LogBoxImages/loader.png');\n      color = LogBoxStyle.getWarningColor(1);\n      break;\n  }\n\n  if (props.status === 'COMPLETE' || image == null) {\n    return null;\n  }\n\n  return React.createElement(_LogBoxButton.default, {\n    backgroundColor: {\n      default: 'transparent',\n      pressed: LogBoxStyle.getBackgroundColor(1)\n    },\n    hitSlop: {\n      bottom: 8,\n      left: 8,\n      right: 8,\n      top: 8\n    },\n    onPress: props.onPress,\n    style: styles.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, React.createElement(_Animated.default.Image, {\n    source: image,\n    style: [styles.image, {\n      tintColor: color\n    }, state.rotate == null || props.status !== 'PENDING' ? null : {\n      transform: [{\n        rotate: state.rotate\n      }]\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }), React.createElement(_Text.default, {\n    style: [styles.text, {\n      color: color\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, \"Source Map\"));\n}\n\nvar styles = _StyleSheet.default.create({\n  root: {\n    alignItems: 'center',\n    borderRadius: 12,\n    flexDirection: 'row',\n    height: 24,\n    paddingHorizontal: 8\n  },\n  image: {\n    height: 14,\n    width: 16,\n    marginEnd: 4,\n    tintColor: LogBoxStyle.getTextColor(0.4)\n  },\n  text: {\n    fontSize: 12,\n    includeFontPadding: false,\n    lineHeight: 16\n  }\n});\n\nvar _default = LogBoxInspectorSourceMapStatus;\nexports.default = _default;","map":{"version":3,"sources":["D:/vsCodes/friday/personal_assist/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorSourceMapStatus.js"],"names":["LogBoxInspectorSourceMapStatus","props","React","useState","animation","rotate","state","setState","useEffect","status","animated","Animated","Value","loop","timing","duration","easing","Easing","linear","toValue","useNativeDriver","interpolate","inputRange","outputRange","start","stop","image","color","require","LogBoxStyle","getErrorColor","getWarningColor","default","pressed","getBackgroundColor","bottom","left","right","top","onPress","styles","root","tintColor","transform","text","StyleSheet","create","alignItems","borderRadius","flexDirection","height","paddingHorizontal","width","marginEnd","getTextColor","fontSize","includeFontPadding","lineHeight"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport Animated from '../../Animated/Animated';\nimport Easing from '../../Animated/Easing';\nimport * as React from 'react';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport Text from '../../Text/Text';\nimport LogBoxButton from './LogBoxButton';\nimport * as LogBoxStyle from './LogBoxStyle';\n\nimport type {PressEvent} from '../../Types/CoreEventTypes';\n\ntype Props = $ReadOnly<{|\n  onPress?: ?(event: PressEvent) => void,\n  status: 'COMPLETE' | 'FAILED' | 'NONE' | 'PENDING',\n|}>;\n\nfunction LogBoxInspectorSourceMapStatus(props: Props): React.Node {\n  const [state, setState] = React.useState({\n    animation: null,\n    rotate: null,\n  });\n\n  React.useEffect(() => {\n    if (props.status === 'PENDING') {\n      if (state.animation == null) {\n        const animated = new Animated.Value(0);\n        const animation = Animated.loop(\n          Animated.timing(animated, {\n            duration: 2000,\n            // $FlowFixMe[method-unbinding]\n            easing: Easing.linear,\n            toValue: 1,\n            useNativeDriver: true,\n          }),\n        );\n        setState({\n          animation,\n          rotate: animated.interpolate({\n            inputRange: [0, 1],\n            /* $FlowFixMe[speculation-ambiguous] (>=0.38.0) - Flow error\n             * detected during the deployment of v0.38.0. To see the error,\n             * remove this comment and run flow */\n            outputRange: ['0deg', '360deg'],\n          }),\n        });\n        animation.start();\n      }\n    } else {\n      if (state.animation != null) {\n        state.animation.stop();\n        setState({\n          animation: null,\n          rotate: null,\n        });\n      }\n    }\n\n    return () => {\n      if (state.animation != null) {\n        state.animation.stop();\n      }\n    };\n  }, [props.status, state.animation]);\n\n  let image;\n  let color;\n  switch (props.status) {\n    case 'FAILED':\n      image = require('./LogBoxImages/alert-triangle.png');\n      color = LogBoxStyle.getErrorColor(1);\n      break;\n    case 'PENDING':\n      image = require('./LogBoxImages/loader.png');\n      color = LogBoxStyle.getWarningColor(1);\n      break;\n  }\n\n  if (props.status === 'COMPLETE' || image == null) {\n    return null;\n  }\n\n  return (\n    <LogBoxButton\n      backgroundColor={{\n        default: 'transparent',\n        pressed: LogBoxStyle.getBackgroundColor(1),\n      }}\n      hitSlop={{bottom: 8, left: 8, right: 8, top: 8}}\n      onPress={props.onPress}\n      style={styles.root}>\n      <Animated.Image\n        source={image}\n        style={[\n          styles.image,\n          {tintColor: color},\n          state.rotate == null || props.status !== 'PENDING'\n            ? null\n            : {transform: [{rotate: state.rotate}]},\n        ]}\n      />\n      <Text style={[styles.text, {color}]}>Source Map</Text>\n    </LogBoxButton>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    alignItems: 'center',\n    borderRadius: 12,\n    flexDirection: 'row',\n    height: 24,\n    paddingHorizontal: 8,\n  },\n  image: {\n    height: 14,\n    width: 16,\n    marginEnd: 4,\n    tintColor: LogBoxStyle.getTextColor(0.4),\n  },\n  text: {\n    fontSize: 12,\n    includeFontPadding: false,\n    lineHeight: 16,\n  },\n});\n\nexport default LogBoxInspectorSourceMapStatus;\n"]},"metadata":{},"sourceType":"script"}