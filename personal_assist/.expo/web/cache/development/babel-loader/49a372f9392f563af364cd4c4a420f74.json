{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useWindowDimensions;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _Dimensions = _interopRequireDefault(require(\"./Dimensions\"));\n\nvar _react = require(\"react\");\n\nfunction useWindowDimensions() {\n  var _useState = (0, _react.useState)(function () {\n    return _Dimensions.default.get('window');\n  }),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      dimensions = _useState2[0],\n      setDimensions = _useState2[1];\n\n  (0, _react.useEffect)(function () {\n    function handleChange(_ref) {\n      var window = _ref.window;\n\n      if (dimensions.width !== window.width || dimensions.height !== window.height || dimensions.scale !== window.scale || dimensions.fontScale !== window.fontScale) {\n        setDimensions(window);\n      }\n    }\n\n    var subscription = _Dimensions.default.addEventListener('change', handleChange);\n\n    handleChange({\n      window: _Dimensions.default.get('window')\n    });\n    return function () {\n      subscription.remove();\n    };\n  }, [dimensions]);\n  return dimensions;\n}","map":{"version":3,"sources":["D:/vsCodes/friday/personal_assist/node_modules/react-native/Libraries/Utilities/useWindowDimensions.js"],"names":["useWindowDimensions","Dimensions","get","dimensions","setDimensions","handleChange","window","width","height","scale","fontScale","subscription","addEventListener","remove"],"mappings":";;;;;;;;;AAUA;;AAKA;;AAEe,SAASA,mBAAT,GAEW;AACxB,kBAAoC,qBAAS;AAAA,WAAMC,oBAAWC,GAAX,CAAe,QAAf,CAAN;AAAA,GAAT,CAApC;AAAA;AAAA,MAAOC,UAAP;AAAA,MAAmBC,aAAnB;;AACA,wBAAU,YAAM;AACd,aAASC,YAAT,OAAgC;AAAA,UAATC,MAAS,QAATA,MAAS;;AAC9B,UACEH,UAAU,CAACI,KAAX,KAAqBD,MAAM,CAACC,KAA5B,IACAJ,UAAU,CAACK,MAAX,KAAsBF,MAAM,CAACE,MAD7B,IAEAL,UAAU,CAACM,KAAX,KAAqBH,MAAM,CAACG,KAF5B,IAGAN,UAAU,CAACO,SAAX,KAAyBJ,MAAM,CAACI,SAJlC,EAKE;AACAN,QAAAA,aAAa,CAACE,MAAD,CAAb;AACD;AACF;;AACD,QAAMK,YAAY,GAAGV,oBAAWW,gBAAX,CAA4B,QAA5B,EAAsCP,YAAtC,CAArB;;AAIAA,IAAAA,YAAY,CAAC;AAACC,MAAAA,MAAM,EAAEL,oBAAWC,GAAX,CAAe,QAAf;AAAT,KAAD,CAAZ;AACA,WAAO,YAAM;AACXS,MAAAA,YAAY,CAACE,MAAb;AACD,KAFD;AAGD,GAnBD,EAmBG,CAACV,UAAD,CAnBH;AAoBA,SAAOA,UAAP;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport Dimensions from './Dimensions';\nimport {\n  type DisplayMetrics,\n  type DisplayMetricsAndroid,\n} from './NativeDeviceInfo';\nimport {useEffect, useState} from 'react';\n\nexport default function useWindowDimensions():\n  | DisplayMetrics\n  | DisplayMetricsAndroid {\n  const [dimensions, setDimensions] = useState(() => Dimensions.get('window'));\n  useEffect(() => {\n    function handleChange({window}) {\n      if (\n        dimensions.width !== window.width ||\n        dimensions.height !== window.height ||\n        dimensions.scale !== window.scale ||\n        dimensions.fontScale !== window.fontScale\n      ) {\n        setDimensions(window);\n      }\n    }\n    const subscription = Dimensions.addEventListener('change', handleChange);\n    // We might have missed an update between calling `get` in render and\n    // `addEventListener` in this handler, so we set it here. If there was\n    // no change, React will filter out this update as a no-op.\n    handleChange({window: Dimensions.get('window')});\n    return () => {\n      subscription.remove();\n    };\n  }, [dimensions]);\n  return dimensions;\n}\n"]},"metadata":{},"sourceType":"script"}