{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.getCollapseMessage = getCollapseMessage;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _StyleSheet = _interopRequireDefault(require(\"../../StyleSheet/StyleSheet\"));\n\nvar _Text = _interopRequireDefault(require(\"../../Text/Text\"));\n\nvar _View = _interopRequireDefault(require(\"../../Components/View/View\"));\n\nvar _LogBoxButton = _interopRequireDefault(require(\"./LogBoxButton\"));\n\nvar _LogBoxInspectorSourceMapStatus = _interopRequireDefault(require(\"./LogBoxInspectorSourceMapStatus\"));\n\nvar _LogBoxInspectorStackFrame = _interopRequireDefault(require(\"./LogBoxInspectorStackFrame\"));\n\nvar _LogBoxInspectorSection = _interopRequireDefault(require(\"./LogBoxInspectorSection\"));\n\nvar LogBoxStyle = _interopRequireWildcard(require(\"./LogBoxStyle\"));\n\nvar _openFileInEditor = _interopRequireDefault(require(\"../../Core/Devtools/openFileInEditor\"));\n\nvar _jsxFileName = \"D:\\\\vsCodes\\\\friday\\\\personal_assist\\\\node_modules\\\\react-native\\\\Libraries\\\\LogBox\\\\UI\\\\LogBoxInspectorStackFrames.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction getCollapseMessage(stackFrames, collapsed) {\n  if (stackFrames.length === 0) {\n    return 'No frames to show';\n  }\n\n  var collapsedCount = stackFrames.reduce(function (count, _ref) {\n    var collapse = _ref.collapse;\n\n    if (collapse === true) {\n      return count + 1;\n    }\n\n    return count;\n  }, 0);\n\n  if (collapsedCount === 0) {\n    return 'Showing all frames';\n  }\n\n  var framePlural = \"frame\" + (collapsedCount > 1 ? 's' : '');\n\n  if (collapsedCount === stackFrames.length) {\n    return collapsed ? \"See\" + (collapsedCount > 1 ? ' all ' : ' ') + collapsedCount + \" collapsed \" + framePlural : \"Collapse\" + (collapsedCount > 1 ? ' all ' : ' ') + collapsedCount + \" \" + framePlural;\n  } else {\n    return collapsed ? \"See \" + collapsedCount + \" more \" + framePlural : \"Collapse \" + collapsedCount + \" \" + framePlural;\n  }\n}\n\nfunction LogBoxInspectorStackFrames(props) {\n  var _React$useState = React.useState(function () {\n    return props.log.getAvailableStack().some(function (_ref2) {\n      var collapse = _ref2.collapse;\n      return !collapse;\n    });\n  }),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      collapsed = _React$useState2[0],\n      setCollapsed = _React$useState2[1];\n\n  function getStackList() {\n    if (collapsed === true) {\n      return props.log.getAvailableStack().filter(function (_ref3) {\n        var collapse = _ref3.collapse;\n        return !collapse;\n      });\n    } else {\n      return props.log.getAvailableStack();\n    }\n  }\n\n  if (props.log.getAvailableStack().length === 0) {\n    return null;\n  }\n\n  return React.createElement(_LogBoxInspectorSection.default, {\n    heading: \"Call Stack\",\n    action: React.createElement(_LogBoxInspectorSourceMapStatus.default, {\n      onPress: props.log.symbolicated.status === 'FAILED' ? props.onRetry : null,\n      status: props.log.symbolicated.status,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, props.log.symbolicated.status !== 'COMPLETE' && React.createElement(_View.default, {\n    style: stackStyles.hintBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, React.createElement(_Text.default, {\n    style: stackStyles.hintText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, \"This call stack is not symbolicated. Some features are unavailable such as viewing the function name or tapping to open files.\")), React.createElement(StackFrameList, {\n    list: getStackList(),\n    status: props.log.symbolicated.status,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }), React.createElement(StackFrameFooter, {\n    onPress: function onPress() {\n      return setCollapsed(!collapsed);\n    },\n    message: getCollapseMessage(props.log.getAvailableStack(), collapsed),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction StackFrameList(props) {\n  var _this = this;\n\n  return React.createElement(React.Fragment, null, props.list.map(function (frame, index) {\n    var file = frame.file,\n        lineNumber = frame.lineNumber;\n    return React.createElement(_LogBoxInspectorStackFrame.default, {\n      key: index,\n      frame: frame,\n      onPress: props.status === 'COMPLETE' && file != null && lineNumber != null ? function () {\n        return (0, _openFileInEditor.default)(file, lineNumber);\n      } : null,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }\n    });\n  }));\n}\n\nfunction StackFrameFooter(props) {\n  return React.createElement(_View.default, {\n    style: stackStyles.collapseContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }, React.createElement(_LogBoxButton.default, {\n    backgroundColor: {\n      default: 'transparent',\n      pressed: LogBoxStyle.getBackgroundColor(1)\n    },\n    onPress: props.onPress,\n    style: stackStyles.collapseButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, React.createElement(_Text.default, {\n    style: stackStyles.collapse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, props.message)));\n}\n\nvar stackStyles = _StyleSheet.default.create({\n  section: {\n    marginTop: 15\n  },\n  heading: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    paddingHorizontal: 12,\n    marginBottom: 10\n  },\n  headingText: {\n    color: LogBoxStyle.getTextColor(1),\n    flex: 1,\n    fontSize: 20,\n    fontWeight: '600',\n    includeFontPadding: false,\n    lineHeight: 20\n  },\n  body: {\n    paddingBottom: 10\n  },\n  bodyText: {\n    color: LogBoxStyle.getTextColor(1),\n    fontSize: 14,\n    includeFontPadding: false,\n    lineHeight: 18,\n    fontWeight: '500',\n    paddingHorizontal: 27\n  },\n  hintText: {\n    color: LogBoxStyle.getTextColor(0.7),\n    fontSize: 13,\n    includeFontPadding: false,\n    lineHeight: 18,\n    fontWeight: '400',\n    marginHorizontal: 10\n  },\n  hintBox: {\n    backgroundColor: LogBoxStyle.getBackgroundColor(),\n    marginHorizontal: 10,\n    paddingHorizontal: 5,\n    paddingVertical: 10,\n    borderRadius: 5,\n    marginBottom: 5\n  },\n  collapseContainer: {\n    marginLeft: 15,\n    flexDirection: 'row'\n  },\n  collapseButton: {\n    borderRadius: 5\n  },\n  collapse: {\n    color: LogBoxStyle.getTextColor(0.7),\n    fontSize: 12,\n    fontWeight: '300',\n    lineHeight: 20,\n    marginTop: 0,\n    paddingHorizontal: 10,\n    paddingVertical: 5\n  }\n});\n\nvar _default = LogBoxInspectorStackFrames;\nexports.default = _default;","map":{"version":3,"sources":["D:/vsCodes/friday/personal_assist/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorStackFrames.js"],"names":["getCollapseMessage","stackFrames","collapsed","length","collapsedCount","reduce","count","collapse","framePlural","LogBoxInspectorStackFrames","props","React","useState","log","getAvailableStack","some","setCollapsed","getStackList","filter","symbolicated","status","onRetry","stackStyles","hintBox","hintText","StackFrameList","list","map","frame","index","file","lineNumber","StackFrameFooter","collapseContainer","default","pressed","LogBoxStyle","getBackgroundColor","onPress","collapseButton","message","StyleSheet","create","section","marginTop","heading","alignItems","flexDirection","paddingHorizontal","marginBottom","headingText","color","getTextColor","flex","fontSize","fontWeight","includeFontPadding","lineHeight","body","paddingBottom","bodyText","marginHorizontal","backgroundColor","paddingVertical","borderRadius","marginLeft"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport * as React from 'react';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport Text from '../../Text/Text';\nimport View from '../../Components/View/View';\nimport LogBoxButton from './LogBoxButton';\nimport LogBoxInspectorSourceMapStatus from './LogBoxInspectorSourceMapStatus';\nimport LogBoxInspectorStackFrame from './LogBoxInspectorStackFrame';\nimport LogBoxInspectorSection from './LogBoxInspectorSection';\nimport * as LogBoxStyle from './LogBoxStyle';\nimport openFileInEditor from '../../Core/Devtools/openFileInEditor';\nimport type {Stack} from '../Data/LogBoxSymbolication';\nimport type LogBoxLog from '../Data/LogBoxLog';\n\ntype Props = $ReadOnly<{|\n  log: LogBoxLog,\n  onRetry: () => void,\n|}>;\n\nexport function getCollapseMessage(\n  stackFrames: Stack,\n  collapsed: boolean,\n): string {\n  if (stackFrames.length === 0) {\n    return 'No frames to show';\n  }\n\n  const collapsedCount = stackFrames.reduce((count, {collapse}) => {\n    if (collapse === true) {\n      return count + 1;\n    }\n\n    return count;\n  }, 0);\n\n  if (collapsedCount === 0) {\n    return 'Showing all frames';\n  }\n\n  const framePlural = `frame${collapsedCount > 1 ? 's' : ''}`;\n  if (collapsedCount === stackFrames.length) {\n    return collapsed\n      ? `See${\n          collapsedCount > 1 ? ' all ' : ' '\n        }${collapsedCount} collapsed ${framePlural}`\n      : `Collapse${\n          collapsedCount > 1 ? ' all ' : ' '\n        }${collapsedCount} ${framePlural}`;\n  } else {\n    return collapsed\n      ? `See ${collapsedCount} more ${framePlural}`\n      : `Collapse ${collapsedCount} ${framePlural}`;\n  }\n}\n\nfunction LogBoxInspectorStackFrames(props: Props): React.Node {\n  const [collapsed, setCollapsed] = React.useState(() => {\n    // Only collapse frames initially if some frames are not collapsed.\n    return props.log.getAvailableStack().some(({collapse}) => !collapse);\n  });\n\n  function getStackList() {\n    if (collapsed === true) {\n      return props.log.getAvailableStack().filter(({collapse}) => !collapse);\n    } else {\n      return props.log.getAvailableStack();\n    }\n  }\n\n  if (props.log.getAvailableStack().length === 0) {\n    return null;\n  }\n\n  return (\n    <LogBoxInspectorSection\n      heading=\"Call Stack\"\n      action={\n        <LogBoxInspectorSourceMapStatus\n          onPress={\n            props.log.symbolicated.status === 'FAILED' ? props.onRetry : null\n          }\n          status={props.log.symbolicated.status}\n        />\n      }>\n      {props.log.symbolicated.status !== 'COMPLETE' && (\n        <View style={stackStyles.hintBox}>\n          <Text style={stackStyles.hintText}>\n            This call stack is not symbolicated. Some features are unavailable\n            such as viewing the function name or tapping to open files.\n          </Text>\n        </View>\n      )}\n      <StackFrameList\n        list={getStackList()}\n        status={props.log.symbolicated.status}\n      />\n      <StackFrameFooter\n        onPress={() => setCollapsed(!collapsed)}\n        message={getCollapseMessage(props.log.getAvailableStack(), collapsed)}\n      />\n    </LogBoxInspectorSection>\n  );\n}\n\nfunction StackFrameList(props) {\n  return (\n    <>\n      {props.list.map((frame, index) => {\n        const {file, lineNumber} = frame;\n        return (\n          <LogBoxInspectorStackFrame\n            key={index}\n            frame={frame}\n            onPress={\n              props.status === 'COMPLETE' && file != null && lineNumber != null\n                ? () => openFileInEditor(file, lineNumber)\n                : null\n            }\n          />\n        );\n      })}\n    </>\n  );\n}\n\nfunction StackFrameFooter(props) {\n  return (\n    <View style={stackStyles.collapseContainer}>\n      <LogBoxButton\n        backgroundColor={{\n          default: 'transparent',\n          pressed: LogBoxStyle.getBackgroundColor(1),\n        }}\n        onPress={props.onPress}\n        style={stackStyles.collapseButton}>\n        <Text style={stackStyles.collapse}>{props.message}</Text>\n      </LogBoxButton>\n    </View>\n  );\n}\n\nconst stackStyles = StyleSheet.create({\n  section: {\n    marginTop: 15,\n  },\n  heading: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    paddingHorizontal: 12,\n    marginBottom: 10,\n  },\n  headingText: {\n    color: LogBoxStyle.getTextColor(1),\n    flex: 1,\n    fontSize: 20,\n    fontWeight: '600',\n    includeFontPadding: false,\n    lineHeight: 20,\n  },\n  body: {\n    paddingBottom: 10,\n  },\n  bodyText: {\n    color: LogBoxStyle.getTextColor(1),\n    fontSize: 14,\n    includeFontPadding: false,\n    lineHeight: 18,\n    fontWeight: '500',\n    paddingHorizontal: 27,\n  },\n  hintText: {\n    color: LogBoxStyle.getTextColor(0.7),\n    fontSize: 13,\n    includeFontPadding: false,\n    lineHeight: 18,\n    fontWeight: '400',\n    marginHorizontal: 10,\n  },\n  hintBox: {\n    backgroundColor: LogBoxStyle.getBackgroundColor(),\n    marginHorizontal: 10,\n    paddingHorizontal: 5,\n    paddingVertical: 10,\n    borderRadius: 5,\n    marginBottom: 5,\n  },\n  collapseContainer: {\n    marginLeft: 15,\n    flexDirection: 'row',\n  },\n  collapseButton: {\n    borderRadius: 5,\n  },\n  collapse: {\n    color: LogBoxStyle.getTextColor(0.7),\n    fontSize: 12,\n    fontWeight: '300',\n    lineHeight: 20,\n    marginTop: 0,\n    paddingHorizontal: 10,\n    paddingVertical: 5,\n  },\n});\n\nexport default LogBoxInspectorStackFrames;\n"]},"metadata":{},"sourceType":"script"}