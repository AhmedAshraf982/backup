{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _StyleSheet = _interopRequireDefault(require(\"../../StyleSheet/StyleSheet\"));\n\nvar _Text = _interopRequireDefault(require(\"../../Text/Text\"));\n\nvar _View = _interopRequireDefault(require(\"../../Components/View/View\"));\n\nvar _Platform = _interopRequireDefault(require(\"../../Utilities/Platform\"));\n\nvar _LogBoxButton = _interopRequireDefault(require(\"./LogBoxButton\"));\n\nvar LogBoxStyle = _interopRequireWildcard(require(\"./LogBoxStyle\"));\n\nvar _jsxFileName = \"D:\\\\vsCodes\\\\friday\\\\personal_assist\\\\node_modules\\\\react-native\\\\Libraries\\\\LogBox\\\\UI\\\\LogBoxInspectorStackFrame.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction LogBoxInspectorStackFrame(props) {\n  var frame = props.frame,\n      onPress = props.onPress;\n  var column = frame.column != null && parseInt(frame.column, 10);\n  var location = getFileName(frame.file) + (frame.lineNumber != null ? ':' + frame.lineNumber + (column && !isNaN(column) ? ':' + (column + 1) : '') : '');\n  return React.createElement(_View.default, {\n    style: styles.frameContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, React.createElement(_LogBoxButton.default, {\n    backgroundColor: {\n      default: 'transparent',\n      pressed: onPress ? LogBoxStyle.getBackgroundColor(1) : 'transparent'\n    },\n    onPress: onPress,\n    style: styles.frame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, React.createElement(_Text.default, {\n    style: [styles.name, frame.collapse === true && styles.dim],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, frame.methodName), React.createElement(_Text.default, {\n    ellipsizeMode: \"middle\",\n    numberOfLines: 1,\n    style: [styles.location, frame.collapse === true && styles.dim],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, location)));\n}\n\nfunction getFileName(file) {\n  if (file == null) {\n    return '<unknown>';\n  }\n\n  var queryIndex = file.indexOf('?');\n  return file.substring(file.lastIndexOf('/') + 1, queryIndex === -1 ? file.length : queryIndex);\n}\n\nvar styles = _StyleSheet.default.create({\n  frameContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: 15\n  },\n  frame: {\n    flex: 1,\n    paddingVertical: 4,\n    paddingHorizontal: 10,\n    borderRadius: 5\n  },\n  lineLocation: {\n    flexDirection: 'row'\n  },\n  name: {\n    color: LogBoxStyle.getTextColor(1),\n    fontSize: 14,\n    includeFontPadding: false,\n    lineHeight: 18,\n    fontWeight: '400',\n    fontFamily: _Platform.default.select({\n      android: 'monospace',\n      ios: 'Menlo'\n    })\n  },\n  location: {\n    color: LogBoxStyle.getTextColor(0.8),\n    fontSize: 12,\n    fontWeight: '300',\n    includeFontPadding: false,\n    lineHeight: 16,\n    paddingLeft: 10\n  },\n  dim: {\n    color: LogBoxStyle.getTextColor(0.4),\n    fontWeight: '300'\n  },\n  line: {\n    color: LogBoxStyle.getTextColor(0.8),\n    fontSize: 12,\n    fontWeight: '300',\n    includeFontPadding: false,\n    lineHeight: 16\n  }\n});\n\nvar _default = LogBoxInspectorStackFrame;\nexports.default = _default;","map":{"version":3,"sources":["D:/vsCodes/friday/personal_assist/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorStackFrame.js"],"names":["LogBoxInspectorStackFrame","props","frame","onPress","column","parseInt","location","getFileName","file","lineNumber","isNaN","styles","frameContainer","default","pressed","LogBoxStyle","getBackgroundColor","name","collapse","dim","methodName","queryIndex","indexOf","substring","lastIndexOf","length","StyleSheet","create","flexDirection","paddingHorizontal","flex","paddingVertical","borderRadius","lineLocation","color","getTextColor","fontSize","includeFontPadding","lineHeight","fontWeight","fontFamily","Platform","select","android","ios","paddingLeft","line"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport * as React from 'react';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport Text from '../../Text/Text';\nimport View from '../../Components/View/View';\nimport Platform from '../../Utilities/Platform';\nimport LogBoxButton from './LogBoxButton';\nimport * as LogBoxStyle from './LogBoxStyle';\n\nimport type {PressEvent} from '../../Types/CoreEventTypes';\nimport type {StackFrame} from '../../Core/NativeExceptionsManager';\n\ntype Props = $ReadOnly<{|\n  frame: StackFrame,\n  onPress?: ?(event: PressEvent) => void,\n|}>;\n\nfunction LogBoxInspectorStackFrame(props: Props): React.Node {\n  const {frame, onPress} = props;\n  const column = frame.column != null && parseInt(frame.column, 10);\n  const location =\n    getFileName(frame.file) +\n    (frame.lineNumber != null\n      ? ':' +\n        frame.lineNumber +\n        (column && !isNaN(column) ? ':' + (column + 1) : '')\n      : '');\n  return (\n    <View style={styles.frameContainer}>\n      <LogBoxButton\n        backgroundColor={{\n          default: 'transparent',\n          pressed: onPress ? LogBoxStyle.getBackgroundColor(1) : 'transparent',\n        }}\n        onPress={onPress}\n        style={styles.frame}>\n        <Text style={[styles.name, frame.collapse === true && styles.dim]}>\n          {frame.methodName}\n        </Text>\n        <Text\n          ellipsizeMode=\"middle\"\n          numberOfLines={1}\n          style={[styles.location, frame.collapse === true && styles.dim]}>\n          {location}\n        </Text>\n      </LogBoxButton>\n    </View>\n  );\n}\n\nfunction getFileName(file) {\n  if (file == null) {\n    return '<unknown>';\n  }\n  const queryIndex = file.indexOf('?');\n  return file.substring(\n    file.lastIndexOf('/') + 1,\n    queryIndex === -1 ? file.length : queryIndex,\n  );\n}\n\nconst styles = StyleSheet.create({\n  frameContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: 15,\n  },\n  frame: {\n    flex: 1,\n    paddingVertical: 4,\n    paddingHorizontal: 10,\n    borderRadius: 5,\n  },\n  lineLocation: {\n    flexDirection: 'row',\n  },\n  name: {\n    color: LogBoxStyle.getTextColor(1),\n    fontSize: 14,\n    includeFontPadding: false,\n    lineHeight: 18,\n    fontWeight: '400',\n    fontFamily: Platform.select({android: 'monospace', ios: 'Menlo'}),\n  },\n  location: {\n    color: LogBoxStyle.getTextColor(0.8),\n    fontSize: 12,\n    fontWeight: '300',\n    includeFontPadding: false,\n    lineHeight: 16,\n    paddingLeft: 10,\n  },\n  dim: {\n    color: LogBoxStyle.getTextColor(0.4),\n    fontWeight: '300',\n  },\n  line: {\n    color: LogBoxStyle.getTextColor(0.8),\n    fontSize: 12,\n    fontWeight: '300',\n    includeFontPadding: false,\n    lineHeight: 16,\n  },\n});\n\nexport default LogBoxInspectorStackFrame;\n"]},"metadata":{},"sourceType":"script"}