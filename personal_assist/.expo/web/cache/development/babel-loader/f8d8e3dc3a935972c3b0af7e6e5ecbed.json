{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.get = get;\nexports.getWithFallback_DEPRECATED = getWithFallback_DEPRECATED;\nexports.setRuntimeConfigProvider = setRuntimeConfigProvider;\nexports.unstable_hasComponent = unstable_hasComponent;\nexports.unstable_hasStaticViewConfig = unstable_hasStaticViewConfig;\n\nvar _ViewConfig = require(\"./ViewConfig\");\n\nvar _UIManager = _interopRequireDefault(require(\"../ReactNative/UIManager\"));\n\nvar _ReactNativeViewConfigRegistry = _interopRequireDefault(require(\"../Renderer/shims/ReactNativeViewConfigRegistry\"));\n\nvar _getNativeComponentAttributes = _interopRequireDefault(require(\"../ReactNative/getNativeComponentAttributes\"));\n\nvar _verifyComponentAttributeEquivalence = _interopRequireDefault(require(\"../Utilities/verifyComponentAttributeEquivalence\"));\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar getRuntimeConfig;\nvar componentNameToExists = new Map();\n\nfunction setRuntimeConfigProvider(runtimeConfigProvider) {\n  (0, _invariant.default)(getRuntimeConfig == null, 'NativeComponentRegistry.setRuntimeConfigProvider() called more than once.');\n  getRuntimeConfig = runtimeConfigProvider;\n}\n\nfunction get(name, viewConfigProvider) {\n  _ReactNativeViewConfigRegistry.default.register(name, function () {\n    var _getRuntimeConfig;\n\n    var _ref = (_getRuntimeConfig = getRuntimeConfig == null ? void 0 : getRuntimeConfig(name)) != null ? _getRuntimeConfig : {\n      native: true,\n      verify: false\n    },\n        native = _ref.native,\n        verify = _ref.verify;\n\n    var viewConfig = native ? (0, _getNativeComponentAttributes.default)(name) : (0, _ViewConfig.createViewConfig)(viewConfigProvider());\n\n    if (verify) {\n      if (native) {\n        (0, _verifyComponentAttributeEquivalence.default)(viewConfig, (0, _ViewConfig.createViewConfig)(viewConfigProvider()));\n      } else {\n        (0, _verifyComponentAttributeEquivalence.default)((0, _getNativeComponentAttributes.default)(name), viewConfig);\n      }\n    }\n\n    return viewConfig;\n  });\n\n  return name;\n}\n\nfunction getWithFallback_DEPRECATED(name, viewConfigProvider) {\n  if (getRuntimeConfig == null) {\n    if (hasNativeViewConfig(name)) {\n      return get(name, viewConfigProvider);\n    }\n  } else {\n    if (getRuntimeConfig(name) != null) {\n      return get(name, viewConfigProvider);\n    }\n  }\n\n  var FallbackNativeComponent = function FallbackNativeComponent(props) {\n    return null;\n  };\n\n  FallbackNativeComponent.displayName = \"Fallback(\" + name + \")\";\n  return FallbackNativeComponent;\n}\n\nfunction hasNativeViewConfig(name) {\n  (0, _invariant.default)(getRuntimeConfig == null, 'Unexpected invocation!');\n  return _UIManager.default.getViewManagerConfig(name) != null;\n}\n\nfunction unstable_hasStaticViewConfig(name) {\n  var _getRuntimeConfig2;\n\n  var _ref2 = (_getRuntimeConfig2 = getRuntimeConfig == null ? void 0 : getRuntimeConfig(name)) != null ? _getRuntimeConfig2 : {\n    native: true\n  },\n      native = _ref2.native;\n\n  return !native;\n}\n\nfunction unstable_hasComponent(name) {\n  var hasNativeComponent = componentNameToExists.get(name);\n\n  if (hasNativeComponent == null) {\n    if (global.__nativeComponentRegistry__hasComponent) {\n      hasNativeComponent = global.__nativeComponentRegistry__hasComponent(name);\n      componentNameToExists.set(name, hasNativeComponent);\n    } else {\n      throw \"unstable_hasComponent('\" + name + \"'): Global function is not registered\";\n    }\n  }\n\n  return hasNativeComponent;\n}","map":{"version":3,"sources":["D:/vsCodes/friday/personal_assist/node_modules/react-native/Libraries/NativeComponent/NativeComponentRegistry.js"],"names":["getRuntimeConfig","componentNameToExists","Map","setRuntimeConfigProvider","runtimeConfigProvider","get","name","viewConfigProvider","ReactNativeViewConfigRegistry","register","native","verify","viewConfig","getWithFallback_DEPRECATED","hasNativeViewConfig","FallbackNativeComponent","props","displayName","UIManager","getViewManagerConfig","unstable_hasStaticViewConfig","unstable_hasComponent","hasNativeComponent","global","__nativeComponentRegistry__hasComponent","set"],"mappings":";;;;;;;;;;;AAUA;;AACA;;AAKA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,IAAIA,gBAAJ;AAEA,IAAIC,qBAA2C,GAAG,IAAIC,GAAJ,EAAlD;;AASO,SAASC,wBAAT,CACLC,qBADK,EAOC;AACN,0BACEJ,gBAAgB,IAAI,IADtB,EAEE,2EAFF;AAIAA,EAAAA,gBAAgB,GAAGI,qBAAnB;AACD;;AAQM,SAASC,GAAT,CACLC,IADK,EAELC,kBAFK,EAGkB;AACvBC,yCAA8BC,QAA9B,CAAuCH,IAAvC,EAA6C,YAAM;AAAA;;AACjD,oCAAyBN,gBAAzB,oBAAyBA,gBAAgB,CAAGM,IAAH,CAAzC,gCAAqD;AACnDI,MAAAA,MAAM,EAAE,IAD2C;AAEnDC,MAAAA,MAAM,EAAE;AAF2C,KAArD;AAAA,QAAOD,MAAP,QAAOA,MAAP;AAAA,QAAeC,MAAf,QAAeA,MAAf;;AAKA,QAAMC,UAAU,GAAGF,MAAM,GACrB,2CAA6BJ,IAA7B,CADqB,GAErB,kCAAiBC,kBAAkB,EAAnC,CAFJ;;AAIA,QAAII,MAAJ,EAAY;AACV,UAAID,MAAJ,EAAY;AACV,0DACEE,UADF,EAEE,kCAAiBL,kBAAkB,EAAnC,CAFF;AAID,OALD,MAKO;AACL,0DACE,2CAA6BD,IAA7B,CADF,EAEEM,UAFF;AAID;AACF;;AAED,WAAOA,UAAP;AACD,GAzBD;;AA4BA,SAAON,IAAP;AACD;;AAWM,SAASO,0BAAT,CACLP,IADK,EAELC,kBAFK,EAG4B;AACjC,MAAIP,gBAAgB,IAAI,IAAxB,EAA8B;AAE5B,QAAIc,mBAAmB,CAACR,IAAD,CAAvB,EAA+B;AAC7B,aAAOD,GAAG,CAASC,IAAT,EAAeC,kBAAf,CAAV;AACD;AACF,GALD,MAKO;AAEL,QAAIP,gBAAgB,CAACM,IAAD,CAAhB,IAA0B,IAA9B,EAAoC;AAClC,aAAOD,GAAG,CAASC,IAAT,EAAeC,kBAAf,CAAV;AACD;AACF;;AAED,MAAMQ,uBAAuB,GAAG,SAA1BA,uBAA0B,CAASC,KAAT,EAAoC;AAClE,WAAO,IAAP;AACD,GAFD;;AAGAD,EAAAA,uBAAuB,CAACE,WAAxB,iBAAkDX,IAAlD;AACA,SAAOS,uBAAP;AACD;;AAED,SAASD,mBAAT,CAA6BR,IAA7B,EAAoD;AAClD,0BAAUN,gBAAgB,IAAI,IAA9B,EAAoC,wBAApC;AACA,SAAOkB,mBAAUC,oBAAV,CAA+Bb,IAA/B,KAAwC,IAA/C;AACD;;AAQM,SAASc,4BAAT,CAAsCd,IAAtC,EAA6D;AAAA;;AAClE,oCAAiBN,gBAAjB,oBAAiBA,gBAAgB,CAAGM,IAAH,CAAjC,iCAA6C;AAC3CI,IAAAA,MAAM,EAAE;AADmC,GAA7C;AAAA,MAAOA,MAAP,SAAOA,MAAP;;AAGA,SAAO,CAACA,MAAR;AACD;;AAQM,SAASW,qBAAT,CAA+Bf,IAA/B,EAAsD;AAC3D,MAAIgB,kBAAkB,GAAGrB,qBAAqB,CAACI,GAAtB,CAA0BC,IAA1B,CAAzB;;AACA,MAAIgB,kBAAkB,IAAI,IAA1B,EAAgC;AAC9B,QAAIC,MAAM,CAACC,uCAAX,EAAoD;AAClDF,MAAAA,kBAAkB,GAAGC,MAAM,CAACC,uCAAP,CAA+ClB,IAA/C,CAArB;AACAL,MAAAA,qBAAqB,CAACwB,GAAtB,CAA0BnB,IAA1B,EAAgCgB,kBAAhC;AACD,KAHD,MAGO;AACL,wCAAgChB,IAAhC;AACD;AACF;;AACD,SAAOgB,kBAAP;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport {createViewConfig} from './ViewConfig';\nimport UIManager from '../ReactNative/UIManager';\nimport type {\n  HostComponent,\n  PartialViewConfig,\n} from '../Renderer/shims/ReactNativeTypes';\nimport ReactNativeViewConfigRegistry from '../Renderer/shims/ReactNativeViewConfigRegistry';\nimport getNativeComponentAttributes from '../ReactNative/getNativeComponentAttributes';\nimport verifyComponentAttributeEquivalence from '../Utilities/verifyComponentAttributeEquivalence';\nimport invariant from 'invariant';\nimport * as React from 'react';\n\nlet getRuntimeConfig;\n\nlet componentNameToExists: Map<string, boolean> = new Map();\n\n/**\n * Configures a function that is called to determine whether a given component\n * should be registered using reflection of the native component at runtime.\n *\n * The provider should return null if the native component is unavailable in\n * the current environment.\n */\nexport function setRuntimeConfigProvider(\n  runtimeConfigProvider: (\n    name: string,\n  ) => ?{\n    native: boolean,\n    verify: boolean,\n  },\n): void {\n  invariant(\n    getRuntimeConfig == null,\n    'NativeComponentRegistry.setRuntimeConfigProvider() called more than once.',\n  );\n  getRuntimeConfig = runtimeConfigProvider;\n}\n\n/**\n * Gets a `NativeComponent` that can be rendered by React Native.\n *\n * The supplied `viewConfigProvider` may or may not be invoked and utilized,\n * depending on how `setRuntimeConfigProvider` is configured.\n */\nexport function get<Config>(\n  name: string,\n  viewConfigProvider: () => PartialViewConfig,\n): HostComponent<Config> {\n  ReactNativeViewConfigRegistry.register(name, () => {\n    const {native, verify} = getRuntimeConfig?.(name) ?? {\n      native: true,\n      verify: false,\n    };\n\n    const viewConfig = native\n      ? getNativeComponentAttributes(name)\n      : createViewConfig(viewConfigProvider());\n\n    if (verify) {\n      if (native) {\n        verifyComponentAttributeEquivalence(\n          viewConfig,\n          createViewConfig(viewConfigProvider()),\n        );\n      } else {\n        verifyComponentAttributeEquivalence(\n          getNativeComponentAttributes(name),\n          viewConfig,\n        );\n      }\n    }\n\n    return viewConfig;\n  });\n\n  // $FlowFixMe[incompatible-return] `NativeComponent` is actually string!\n  return name;\n}\n\n/**\n * Same as `NativeComponentRegistry.get(...)`, except this will check either\n * the `setRuntimeConfigProvider` configuration or use native reflection (slow)\n * to determine whether this native component is available.\n *\n * If the native component is not available, a stub component is returned. Note\n * that the return value of this is not `HostComponent` because the returned\n * component instance is not guaranteed to have native methods.\n */\nexport function getWithFallback_DEPRECATED<Config>(\n  name: string,\n  viewConfigProvider: () => PartialViewConfig,\n): React.AbstractComponent<Config> {\n  if (getRuntimeConfig == null) {\n    // If `setRuntimeConfigProvider` is not configured, use native reflection.\n    if (hasNativeViewConfig(name)) {\n      return get<Config>(name, viewConfigProvider);\n    }\n  } else {\n    // If there is no runtime config, then the native component is unavailable.\n    if (getRuntimeConfig(name) != null) {\n      return get<Config>(name, viewConfigProvider);\n    }\n  }\n\n  const FallbackNativeComponent = function(props: Config): React.Node {\n    return null;\n  };\n  FallbackNativeComponent.displayName = `Fallback(${name})`;\n  return FallbackNativeComponent;\n}\n\nfunction hasNativeViewConfig(name: string): boolean {\n  invariant(getRuntimeConfig == null, 'Unexpected invocation!');\n  return UIManager.getViewManagerConfig(name) != null;\n}\n\n/**\n * Unstable API. Do not use!\n *\n * This method returns if there is a StaticViewConfig registered for the\n * component name received as a parameter.\n */\nexport function unstable_hasStaticViewConfig(name: string): boolean {\n  const {native} = getRuntimeConfig?.(name) ?? {\n    native: true,\n  };\n  return !native;\n}\n\n/**\n * Unstable API. Do not use!\n *\n * This method returns if the component with name received as a parameter\n * is registed in the native platform.\n */\nexport function unstable_hasComponent(name: string): boolean {\n  let hasNativeComponent = componentNameToExists.get(name);\n  if (hasNativeComponent == null) {\n    if (global.__nativeComponentRegistry__hasComponent) {\n      hasNativeComponent = global.__nativeComponentRegistry__hasComponent(name);\n      componentNameToExists.set(name, hasNativeComponent);\n    } else {\n      throw `unstable_hasComponent('${name}'): Global function is not registered`;\n    }\n  }\n  return hasNativeComponent;\n}\n"]},"metadata":{},"sourceType":"script"}