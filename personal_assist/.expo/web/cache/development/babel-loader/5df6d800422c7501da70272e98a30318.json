{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar Voice = _reactNative.NativeModules.Voice;\nvar voiceEmitter = _reactNative.Platform.OS !== 'web' ? new _reactNative.NativeEventEmitter(Voice) : null;\n\nvar RCTVoice = function () {\n  function RCTVoice() {\n    (0, _classCallCheck2.default)(this, RCTVoice);\n    this._loaded = false;\n    this._listeners = null;\n    this._events = {\n      onSpeechStart: this._onSpeechStart.bind(this),\n      onSpeechRecognized: this._onSpeechRecognized.bind(this),\n      onSpeechEnd: this._onSpeechEnd.bind(this),\n      onSpeechError: this._onSpeechError.bind(this),\n      onSpeechResults: this._onSpeechResults.bind(this),\n      onSpeechPartialResults: this._onSpeechPartialResults.bind(this),\n      onSpeechVolumeChanged: this._onSpeechVolumeChanged.bind(this)\n    };\n  }\n\n  (0, _createClass2.default)(RCTVoice, [{\n    key: \"removeAllListeners\",\n    value: function removeAllListeners() {\n      Voice.onSpeechStart = null;\n      Voice.onSpeechRecognized = null;\n      Voice.onSpeechEnd = null;\n      Voice.onSpeechError = null;\n      Voice.onSpeechResults = null;\n      Voice.onSpeechPartialResults = null;\n      Voice.onSpeechVolumeChanged = null;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this = this;\n\n      if (!this._loaded && !this._listeners) {\n        return Promise.resolve();\n      }\n\n      return new Promise(function (resolve, reject) {\n        Voice.destroySpeech(function (error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            if (_this._listeners) {\n              _this._listeners.map(function (listener) {\n                return listener.remove();\n              });\n\n              _this._listeners = null;\n            }\n\n            resolve();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"start\",\n    value: function start(locale) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!this._loaded && !this._listeners && voiceEmitter !== null) {\n        this._listeners = Object.keys(this._events).map(function (key) {\n          return voiceEmitter.addListener(key, _this2._events[key]);\n        });\n      }\n\n      return new Promise(function (resolve, reject) {\n        var callback = function callback(error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            resolve();\n          }\n        };\n\n        if (_reactNative.Platform.OS === 'android') {\n          Voice.startSpeech(locale, (0, _extends2.default)({\n            EXTRA_LANGUAGE_MODEL: 'LANGUAGE_MODEL_FREE_FORM',\n            EXTRA_MAX_RESULTS: 5,\n            EXTRA_PARTIAL_RESULTS: true,\n            REQUEST_PERMISSIONS_AUTO: true\n          }, options), callback);\n        } else {\n          Voice.startSpeech(locale, callback);\n        }\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!this._loaded && !this._listeners) {\n        return Promise.resolve();\n      }\n\n      return new Promise(function (resolve, reject) {\n        Voice.stopSpeech(function (error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            resolve();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (!this._loaded && !this._listeners) {\n        return Promise.resolve();\n      }\n\n      return new Promise(function (resolve, reject) {\n        Voice.cancelSpeech(function (error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            resolve();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"isAvailable\",\n    value: function isAvailable() {\n      return new Promise(function (resolve, reject) {\n        Voice.isSpeechAvailable(function (isAvailable, error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            resolve(isAvailable);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"getSpeechRecognitionServices\",\n    value: function getSpeechRecognitionServices() {\n      if (_reactNative.Platform.OS !== 'android') {\n        throw new Exception('Speech recognition services can be queried for only on Android');\n      }\n\n      return Voice.getSpeechRecognitionServices();\n    }\n  }, {\n    key: \"isRecognizing\",\n    value: function isRecognizing() {\n      return new Promise(function (resolve) {\n        Voice.isRecognizing(function (isRecognizing) {\n          return resolve(isRecognizing);\n        });\n      });\n    }\n  }, {\n    key: \"_onSpeechStart\",\n    value: function _onSpeechStart(e) {\n      if (this.onSpeechStart) {\n        this.onSpeechStart(e);\n      }\n    }\n  }, {\n    key: \"_onSpeechRecognized\",\n    value: function _onSpeechRecognized(e) {\n      if (this.onSpeechRecognized) {\n        this.onSpeechRecognized(e);\n      }\n    }\n  }, {\n    key: \"_onSpeechEnd\",\n    value: function _onSpeechEnd(e) {\n      if (this.onSpeechEnd) {\n        this.onSpeechEnd(e);\n      }\n    }\n  }, {\n    key: \"_onSpeechError\",\n    value: function _onSpeechError(e) {\n      if (this.onSpeechError) {\n        this.onSpeechError(e);\n      }\n    }\n  }, {\n    key: \"_onSpeechResults\",\n    value: function _onSpeechResults(e) {\n      if (this.onSpeechResults) {\n        this.onSpeechResults(e);\n      }\n    }\n  }, {\n    key: \"_onSpeechPartialResults\",\n    value: function _onSpeechPartialResults(e) {\n      if (this.onSpeechPartialResults) {\n        this.onSpeechPartialResults(e);\n      }\n    }\n  }, {\n    key: \"_onSpeechVolumeChanged\",\n    value: function _onSpeechVolumeChanged(e) {\n      if (this.onSpeechVolumeChanged) {\n        this.onSpeechVolumeChanged(e);\n      }\n    }\n  }]);\n  return RCTVoice;\n}();\n\nvar _default = new RCTVoice();\n\nexports.default = _default;","map":{"version":3,"sources":["D:/vsCodes/friday/personal_assist/node_modules/react-native-voice/src/index.js"],"names":["Voice","NativeModules","voiceEmitter","Platform","OS","NativeEventEmitter","RCTVoice","_loaded","_listeners","_events","onSpeechStart","_onSpeechStart","bind","onSpeechRecognized","_onSpeechRecognized","onSpeechEnd","_onSpeechEnd","onSpeechError","_onSpeechError","onSpeechResults","_onSpeechResults","onSpeechPartialResults","_onSpeechPartialResults","onSpeechVolumeChanged","_onSpeechVolumeChanged","Promise","resolve","reject","destroySpeech","error","Error","map","listener","remove","locale","options","Object","keys","key","addListener","callback","startSpeech","EXTRA_LANGUAGE_MODEL","EXTRA_MAX_RESULTS","EXTRA_PARTIAL_RESULTS","REQUEST_PERMISSIONS_AUTO","stopSpeech","cancelSpeech","isSpeechAvailable","isAvailable","Exception","getSpeechRecognitionServices","isRecognizing","e"],"mappings":"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","sourcesContent":["import { NativeModules, NativeEventEmitter, Platform } from 'react-native';\n\nconst { Voice } = NativeModules;\n\n// NativeEventEmitter is only availabe on React Native platforms, so this conditional is used to avoid import conflicts in the browser/server\nconst voiceEmitter = Platform.OS !== 'web' ? new NativeEventEmitter(Voice) : null;\n\nclass RCTVoice {\n  constructor() {\n    this._loaded = false;\n    this._listeners = null;\n    this._events = {\n      onSpeechStart: this._onSpeechStart.bind(this),\n      onSpeechRecognized: this._onSpeechRecognized.bind(this),\n      onSpeechEnd: this._onSpeechEnd.bind(this),\n      onSpeechError: this._onSpeechError.bind(this),\n      onSpeechResults: this._onSpeechResults.bind(this),\n      onSpeechPartialResults: this._onSpeechPartialResults.bind(this),\n      onSpeechVolumeChanged: this._onSpeechVolumeChanged.bind(this),\n    };\n  }\n  removeAllListeners() {\n    Voice.onSpeechStart = null;\n    Voice.onSpeechRecognized = null;\n    Voice.onSpeechEnd = null;\n    Voice.onSpeechError = null;\n    Voice.onSpeechResults = null;\n    Voice.onSpeechPartialResults = null;\n    Voice.onSpeechVolumeChanged = null;\n  }\n  destroy() {\n    if (!this._loaded && !this._listeners) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      Voice.destroySpeech(error => {\n        if (error) {\n          reject(new Error(error));\n        } else {\n          if (this._listeners) {\n            this._listeners.map(listener => listener.remove());\n            this._listeners = null;\n          }\n          resolve();\n        }\n      });\n    });\n  }\n  start(locale, options = {}) {\n    if (!this._loaded && !this._listeners && voiceEmitter !== null) {\n      this._listeners = Object.keys(this._events).map(key =>\n        voiceEmitter.addListener(key, this._events[key]),\n      );\n    }\n\n    return new Promise((resolve, reject) => {\n      const callback = error => {\n        if (error) {\n          reject(new Error(error));\n        } else {\n          resolve();\n        }\n      };\n      if (Platform.OS === 'android') {\n        Voice.startSpeech(\n          locale,\n          Object.assign(\n            {\n              EXTRA_LANGUAGE_MODEL: 'LANGUAGE_MODEL_FREE_FORM',\n              EXTRA_MAX_RESULTS: 5,\n              EXTRA_PARTIAL_RESULTS: true,\n              REQUEST_PERMISSIONS_AUTO: true,\n            },\n            options,\n          ),\n          callback,\n        );\n      } else {\n        Voice.startSpeech(locale, callback);\n      }\n    });\n  }\n  stop() {\n    if (!this._loaded && !this._listeners) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      Voice.stopSpeech(error => {\n        if (error) {\n          reject(new Error(error));\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n  cancel() {\n    if (!this._loaded && !this._listeners) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      Voice.cancelSpeech(error => {\n        if (error) {\n          reject(new Error(error));\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n  isAvailable() {\n    return new Promise((resolve, reject) => {\n      Voice.isSpeechAvailable((isAvailable, error) => {\n        if (error) {\n          reject(new Error(error));\n        } else {\n          resolve(isAvailable);\n        }\n      });\n    });\n  }\n\n  /**\n   * (Android) Get a list of the speech recognition engines available on the device\n   * */\n  getSpeechRecognitionServices() {\n    if (Platform.OS !== 'android') {\n      throw new Exception('Speech recognition services can be queried for only on Android');\n    }\n\n    return Voice.getSpeechRecognitionServices();\n  }\n\n  isRecognizing() {\n    return new Promise(resolve => {\n      Voice.isRecognizing(isRecognizing => resolve(isRecognizing));\n    });\n  }\n  _onSpeechStart(e) {\n    if (this.onSpeechStart) {\n      this.onSpeechStart(e);\n    }\n  }\n  _onSpeechRecognized(e) {\n    if (this.onSpeechRecognized) {\n      this.onSpeechRecognized(e);\n    }\n  }\n  _onSpeechEnd(e) {\n    if (this.onSpeechEnd) {\n      this.onSpeechEnd(e);\n    }\n  }\n  _onSpeechError(e) {\n    if (this.onSpeechError) {\n      this.onSpeechError(e);\n    }\n  }\n  _onSpeechResults(e) {\n    if (this.onSpeechResults) {\n      this.onSpeechResults(e);\n    }\n  }\n  _onSpeechPartialResults(e) {\n    if (this.onSpeechPartialResults) {\n      this.onSpeechPartialResults(e);\n    }\n  }\n  _onSpeechVolumeChanged(e) {\n    if (this.onSpeechVolumeChanged) {\n      this.onSpeechVolumeChanged(e);\n    }\n  }\n}\n\nexport default new RCTVoice();\n"]},"metadata":{},"sourceType":"script"}