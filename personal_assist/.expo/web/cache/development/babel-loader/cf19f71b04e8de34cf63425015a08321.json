{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _NativeImagePickerIOS = _interopRequireDefault(require(\"./NativeImagePickerIOS\"));\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar ImagePickerIOS = {\n  canRecordVideos: function canRecordVideos(callback) {\n    (0, _invariant.default)(_NativeImagePickerIOS.default, 'ImagePickerIOS is not available');\n    return _NativeImagePickerIOS.default.canRecordVideos(callback);\n  },\n  canUseCamera: function canUseCamera(callback) {\n    (0, _invariant.default)(_NativeImagePickerIOS.default, 'ImagePickerIOS is not available');\n    return _NativeImagePickerIOS.default.canUseCamera(callback);\n  },\n  openCameraDialog: function openCameraDialog(config, successCallback, cancelCallback) {\n    (0, _invariant.default)(_NativeImagePickerIOS.default, 'ImagePickerIOS is not available');\n    var newConfig = {\n      videoMode: true,\n      unmirrorFrontFacingCamera: false\n    };\n\n    if (config.videoMode != null) {\n      newConfig.videoMode = config.videoMode;\n    }\n\n    if (config.unmirrorFrontFacingCamera != null) {\n      newConfig.unmirrorFrontFacingCamera = config.unmirrorFrontFacingCamera;\n    }\n\n    return _NativeImagePickerIOS.default.openCameraDialog(newConfig, successCallback, cancelCallback);\n  },\n  openSelectDialog: function openSelectDialog(config, successCallback, cancelCallback) {\n    (0, _invariant.default)(_NativeImagePickerIOS.default, 'ImagePickerIOS is not available');\n    var newConfig = {\n      showImages: true,\n      showVideos: false\n    };\n\n    if (config.showImages != null) {\n      newConfig.showImages = config.showImages;\n    }\n\n    if (config.showVideos != null) {\n      newConfig.showVideos = config.showVideos;\n    }\n\n    return _NativeImagePickerIOS.default.openSelectDialog(newConfig, successCallback, cancelCallback);\n  },\n  removePendingVideo: function removePendingVideo(url) {\n    (0, _invariant.default)(_NativeImagePickerIOS.default, 'ImagePickerIOS is not available');\n\n    _NativeImagePickerIOS.default.removePendingVideo(url);\n  },\n  clearAllPendingVideos: function clearAllPendingVideos() {\n    (0, _invariant.default)(_NativeImagePickerIOS.default, 'ImagePickerIOS is not available');\n\n    _NativeImagePickerIOS.default.clearAllPendingVideos();\n  }\n};\nmodule.exports = ImagePickerIOS;","map":{"version":3,"sources":["D:/vsCodes/friday/personal_assist/node_modules/react-native/Libraries/Image/ImagePickerIOS.js"],"names":["ImagePickerIOS","canRecordVideos","callback","NativeImagePickerIOS","canUseCamera","openCameraDialog","config","successCallback","cancelCallback","newConfig","videoMode","unmirrorFrontFacingCamera","openSelectDialog","showImages","showVideos","removePendingVideo","url","clearAllPendingVideos","module","exports"],"mappings":";;AAUA;;AACA;;AAEA,IAAMA,cAAc,GAAG;AACrBC,EAAAA,eAAe,EAAE,yBAASC,QAAT,EAAoD;AACnE,4BAAUC,6BAAV,EAAgC,iCAAhC;AACA,WAAOA,8BAAqBF,eAArB,CAAqCC,QAArC,CAAP;AACD,GAJoB;AAKrBE,EAAAA,YAAY,EAAE,sBAASF,QAAT,EAAoD;AAChE,4BAAUC,6BAAV,EAAgC,iCAAhC;AACA,WAAOA,8BAAqBC,YAArB,CAAkCF,QAAlC,CAAP;AACD,GARoB;AASrBG,EAAAA,gBAAgB,EAAE,0BAChBC,MADgB,EAKhBC,eALgB,EAMhBC,cANgB,EAOV;AACN,4BAAUL,6BAAV,EAAgC,iCAAhC;AAEA,QAAIM,SAAS,GAAG;AACdC,MAAAA,SAAS,EAAE,IADG;AAEdC,MAAAA,yBAAyB,EAAE;AAFb,KAAhB;;AAKA,QAAIL,MAAM,CAACI,SAAP,IAAoB,IAAxB,EAA8B;AAC5BD,MAAAA,SAAS,CAACC,SAAV,GAAsBJ,MAAM,CAACI,SAA7B;AACD;;AAED,QAAIJ,MAAM,CAACK,yBAAP,IAAoC,IAAxC,EAA8C;AAC5CF,MAAAA,SAAS,CAACE,yBAAV,GAAsCL,MAAM,CAACK,yBAA7C;AACD;;AAED,WAAOR,8BAAqBE,gBAArB,CACLI,SADK,EAELF,eAFK,EAGLC,cAHK,CAAP;AAKD,GArCoB;AAsCrBI,EAAAA,gBAAgB,EAAE,0BAChBN,MADgB,EAKhBC,eALgB,EAMhBC,cANgB,EAOV;AACN,4BAAUL,6BAAV,EAAgC,iCAAhC;AAEA,QAAIM,SAAS,GAAG;AACdI,MAAAA,UAAU,EAAE,IADE;AAEdC,MAAAA,UAAU,EAAE;AAFE,KAAhB;;AAKA,QAAIR,MAAM,CAACO,UAAP,IAAqB,IAAzB,EAA+B;AAC7BJ,MAAAA,SAAS,CAACI,UAAV,GAAuBP,MAAM,CAACO,UAA9B;AACD;;AAED,QAAIP,MAAM,CAACQ,UAAP,IAAqB,IAAzB,EAA+B;AAC7BL,MAAAA,SAAS,CAACK,UAAV,GAAuBR,MAAM,CAACQ,UAA9B;AACD;;AAED,WAAOX,8BAAqBS,gBAArB,CACLH,SADK,EAELF,eAFK,EAGLC,cAHK,CAAP;AAKD,GAlEoB;AA2ErBO,EAAAA,kBAAkB,EAAE,4BAASC,GAAT,EAA4B;AAC9C,4BAAUb,6BAAV,EAAgC,iCAAhC;;AACAA,kCAAqBY,kBAArB,CAAwCC,GAAxC;AACD,GA9EoB;AAmFrBC,EAAAA,qBAAqB,EAAE,iCAAiB;AACtC,4BAAUd,6BAAV,EAAgC,iCAAhC;;AACAA,kCAAqBc,qBAArB;AACD;AAtFoB,CAAvB;AAyFAC,MAAM,CAACC,OAAP,GAAiBnB,cAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport NativeImagePickerIOS from './NativeImagePickerIOS';\nimport invariant from 'invariant';\n\nconst ImagePickerIOS = {\n  canRecordVideos: function(callback: (result: boolean) => void): void {\n    invariant(NativeImagePickerIOS, 'ImagePickerIOS is not available');\n    return NativeImagePickerIOS.canRecordVideos(callback);\n  },\n  canUseCamera: function(callback: (result: boolean) => void): void {\n    invariant(NativeImagePickerIOS, 'ImagePickerIOS is not available');\n    return NativeImagePickerIOS.canUseCamera(callback);\n  },\n  openCameraDialog: function(\n    config: $ReadOnly<{|\n      unmirrorFrontFacingCamera?: boolean,\n      videoMode?: boolean,\n    |}>,\n    successCallback: (imageURL: string, height: number, width: number) => void,\n    cancelCallback: () => void,\n  ): void {\n    invariant(NativeImagePickerIOS, 'ImagePickerIOS is not available');\n\n    var newConfig = {\n      videoMode: true,\n      unmirrorFrontFacingCamera: false,\n    };\n\n    if (config.videoMode != null) {\n      newConfig.videoMode = config.videoMode;\n    }\n\n    if (config.unmirrorFrontFacingCamera != null) {\n      newConfig.unmirrorFrontFacingCamera = config.unmirrorFrontFacingCamera;\n    }\n\n    return NativeImagePickerIOS.openCameraDialog(\n      newConfig,\n      successCallback,\n      cancelCallback,\n    );\n  },\n  openSelectDialog: function(\n    config: $ReadOnly<{|\n      showImages?: boolean,\n      showVideos?: boolean,\n    |}>,\n    successCallback: (imageURL: string, height: number, width: number) => void,\n    cancelCallback: () => void,\n  ): void {\n    invariant(NativeImagePickerIOS, 'ImagePickerIOS is not available');\n\n    var newConfig = {\n      showImages: true,\n      showVideos: false,\n    };\n\n    if (config.showImages != null) {\n      newConfig.showImages = config.showImages;\n    }\n\n    if (config.showVideos != null) {\n      newConfig.showVideos = config.showVideos;\n    }\n\n    return NativeImagePickerIOS.openSelectDialog(\n      newConfig,\n      successCallback,\n      cancelCallback,\n    );\n  },\n  /**\n   * In iOS 13, the video URLs returned by the Image Picker are invalidated when\n   * the picker is dismissed, unless reference to it is held. This API allows\n   * the application to signal when it's finished with the video so that the\n   * reference can be cleaned up.\n   * It is safe to call this method for urlsthat aren't video URLs;\n   * it will be a no-op.\n   */\n  removePendingVideo: function(url: string): void {\n    invariant(NativeImagePickerIOS, 'ImagePickerIOS is not available');\n    NativeImagePickerIOS.removePendingVideo(url);\n  },\n  /**\n   * WARNING: In most cases, removePendingVideo should be used instead because\n   * clearAllPendingVideos could clear out pending videos made by other callers.\n   */\n  clearAllPendingVideos: function(): void {\n    invariant(NativeImagePickerIOS, 'ImagePickerIOS is not available');\n    NativeImagePickerIOS.clearAllPendingVideos();\n  },\n};\n\nmodule.exports = ImagePickerIOS;\n"]},"metadata":{},"sourceType":"script"}