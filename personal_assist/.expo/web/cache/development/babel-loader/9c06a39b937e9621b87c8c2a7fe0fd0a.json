{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _Platform = _interopRequireDefault(require(\"../Utilities/Platform\"));\n\nvar _RCTDeviceEventEmitter = _interopRequireDefault(require(\"./RCTDeviceEventEmitter\"));\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar NativeEventEmitter = function () {\n  function NativeEventEmitter(nativeModule) {\n    (0, _classCallCheck2.default)(this, NativeEventEmitter);\n\n    if (_Platform.default.OS === 'ios') {\n      (0, _invariant.default)(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');\n    }\n\n    var hasAddListener = !!nativeModule && typeof nativeModule.addListener === 'function';\n    var hasRemoveListeners = !!nativeModule && typeof nativeModule.removeListeners === 'function';\n\n    if (nativeModule && hasAddListener && hasRemoveListeners) {\n      this._nativeModule = nativeModule;\n    } else if (nativeModule != null) {\n      if (!hasAddListener) {\n        console.warn('`new NativeEventEmitter()` was called with a non-null argument without the required `addListener` method.');\n      }\n\n      if (!hasRemoveListeners) {\n        console.warn('`new NativeEventEmitter()` was called with a non-null argument without the required `removeListeners` method.');\n      }\n    }\n  }\n\n  (0, _createClass2.default)(NativeEventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(eventType, listener, context) {\n      var _this$_nativeModule,\n          _this = this;\n\n      (_this$_nativeModule = this._nativeModule) == null ? void 0 : _this$_nativeModule.addListener(eventType);\n\n      var subscription = _RCTDeviceEventEmitter.default.addListener(eventType, listener, context);\n\n      return {\n        remove: function remove() {\n          if (subscription != null) {\n            var _this$_nativeModule2;\n\n            (_this$_nativeModule2 = _this._nativeModule) == null ? void 0 : _this$_nativeModule2.removeListeners(1);\n            subscription.remove();\n            subscription = null;\n          }\n        }\n      };\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(eventType, listener) {\n      var _this$_nativeModule3;\n\n      (_this$_nativeModule3 = this._nativeModule) == null ? void 0 : _this$_nativeModule3.removeListeners(1);\n\n      _RCTDeviceEventEmitter.default.removeListener(eventType, listener);\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventType) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      _RCTDeviceEventEmitter.default.emit.apply(_RCTDeviceEventEmitter.default, [eventType].concat(args));\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventType) {\n      var _this$_nativeModule4;\n\n      (0, _invariant.default)(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');\n      (_this$_nativeModule4 = this._nativeModule) == null ? void 0 : _this$_nativeModule4.removeListeners(this.listenerCount(eventType));\n\n      _RCTDeviceEventEmitter.default.removeAllListeners(eventType);\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventType) {\n      return _RCTDeviceEventEmitter.default.listenerCount(eventType);\n    }\n  }]);\n  return NativeEventEmitter;\n}();\n\nexports.default = NativeEventEmitter;","map":{"version":3,"sources":["D:/vsCodes/friday/personal_assist/node_modules/react-native/Libraries/EventEmitter/NativeEventEmitter.js"],"names":["NativeEventEmitter","nativeModule","Platform","OS","hasAddListener","addListener","hasRemoveListeners","removeListeners","_nativeModule","console","warn","eventType","listener","context","subscription","RCTDeviceEventEmitter","remove","removeListener","args","emit","listenerCount","removeAllListeners"],"mappings":"AAUA;;;;;;;;;;;;;AAMA;;AACA;;AACA;;IAmBqBA,kB;AAInB,8BAAYC,YAAZ,EAAyC;AAAA;;AACvC,QAAIC,kBAASC,EAAT,KAAgB,KAApB,EAA2B;AACzB,8BACEF,YAAY,IAAI,IADlB,EAEE,0DAFF;AAID;;AAED,QAAMG,cAAc,GAElB,CAAC,CAACH,YAAF,IAAkB,OAAOA,YAAY,CAACI,WAApB,KAAoC,UAFxD;AAGA,QAAMC,kBAAkB,GAEtB,CAAC,CAACL,YAAF,IAAkB,OAAOA,YAAY,CAACM,eAApB,KAAwC,UAF5D;;AAIA,QAAIN,YAAY,IAAIG,cAAhB,IAAkCE,kBAAtC,EAA0D;AACxD,WAAKE,aAAL,GAAqBP,YAArB;AACD,KAFD,MAEO,IAAIA,YAAY,IAAI,IAApB,EAA0B;AAC/B,UAAI,CAACG,cAAL,EAAqB;AACnBK,QAAAA,OAAO,CAACC,IAAR,CACE,2GADF;AAGD;;AACD,UAAI,CAACJ,kBAAL,EAAyB;AACvBG,QAAAA,OAAO,CAACC,IAAR,CACE,+GADF;AAGD;AACF;AACF;;;;WAED,qBACEC,SADF,EAEEC,QAFF,EAGEC,OAHF,EAIqB;AAAA;AAAA;;AACnB,kCAAKL,aAAL,yCAAoBH,WAApB,CAAgCM,SAAhC;;AACA,UAAIG,YAAgC,GAAGC,+BAAsBV,WAAtB,CACrCM,SADqC,EAErCC,QAFqC,EAGrCC,OAHqC,CAAvC;;AAMA,aAAO;AACLG,QAAAA,MAAM,EAAE,kBAAM;AACZ,cAAIF,YAAY,IAAI,IAApB,EAA0B;AAAA;;AACxB,oCAAA,KAAI,CAACN,aAAL,0CAAoBD,eAApB,CAAoC,CAApC;AAEAO,YAAAA,YAAY,CAACE,MAAb;AACAF,YAAAA,YAAY,GAAG,IAAf;AACD;AACF;AARI,OAAP;AAUD;;;WAKD,wBACEH,SADF,EAEEC,QAFF,EAGQ;AAAA;;AACN,mCAAKJ,aAAL,0CAAoBD,eAApB,CAAoC,CAApC;;AAGAQ,qCAAsBE,cAAtB,CAAqCN,SAArC,EAAgDC,QAAhD;AACD;;;WAED,cACED,SADF,EAGQ;AAAA,wCADHO,IACG;AADHA,QAAAA,IACG;AAAA;;AAGNH,qCAAsBI,IAAtB,wCAA2BR,SAA3B,SAAyCO,IAAzC;AACD;;;WAED,4BACEP,SADF,EAEQ;AAAA;;AACN,8BACEA,SAAS,IAAI,IADf,EAEE,wEAFF;AAIA,mCAAKH,aAAL,0CAAoBD,eAApB,CAAoC,KAAKa,aAAL,CAAmBT,SAAnB,CAApC;;AACAI,qCAAsBM,kBAAtB,CAAyCV,SAAzC;AACD;;;WAED,uBAA8CA,SAA9C,EAAyE;AACvE,aAAOI,+BAAsBK,aAAtB,CAAoCT,SAApC,CAAP;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport {\n  type EventSubscription,\n  type IEventEmitter,\n} from '../vendor/emitter/EventEmitter';\nimport Platform from '../Utilities/Platform';\nimport RCTDeviceEventEmitter from './RCTDeviceEventEmitter';\nimport invariant from 'invariant';\n\ninterface NativeModule {\n  addListener(eventType: string): void;\n  removeListeners(count: number): void;\n}\n\nexport type {EventSubscription};\n\n/**\n * `NativeEventEmitter` is intended for use by Native Modules to emit events to\n * JavaScript listeners. If a `NativeModule` is supplied to the constructor, it\n * will be notified (via `addListener` and `removeListeners`) when the listener\n * count changes to manage \"native memory\".\n *\n * Currently, all native events are fired via a global `RCTDeviceEventEmitter`.\n * This means event names must be globally unique, and it means that call sites\n * can theoretically listen to `RCTDeviceEventEmitter` (although discouraged).\n */\nexport default class NativeEventEmitter<TEventToArgsMap: {...}>\n  implements IEventEmitter<TEventToArgsMap> {\n  _nativeModule: ?NativeModule;\n\n  constructor(nativeModule: ?NativeModule) {\n    if (Platform.OS === 'ios') {\n      invariant(\n        nativeModule != null,\n        '`new NativeEventEmitter()` requires a non-null argument.',\n      );\n    }\n\n    const hasAddListener =\n      // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n      !!nativeModule && typeof nativeModule.addListener === 'function';\n    const hasRemoveListeners =\n      // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n      !!nativeModule && typeof nativeModule.removeListeners === 'function';\n\n    if (nativeModule && hasAddListener && hasRemoveListeners) {\n      this._nativeModule = nativeModule;\n    } else if (nativeModule != null) {\n      if (!hasAddListener) {\n        console.warn(\n          '`new NativeEventEmitter()` was called with a non-null argument without the required `addListener` method.',\n        );\n      }\n      if (!hasRemoveListeners) {\n        console.warn(\n          '`new NativeEventEmitter()` was called with a non-null argument without the required `removeListeners` method.',\n        );\n      }\n    }\n  }\n\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: $ElementType<TEventToArgsMap, TEvent>) => mixed,\n    context?: mixed,\n  ): EventSubscription {\n    this._nativeModule?.addListener(eventType);\n    let subscription: ?EventSubscription = RCTDeviceEventEmitter.addListener(\n      eventType,\n      listener,\n      context,\n    );\n\n    return {\n      remove: () => {\n        if (subscription != null) {\n          this._nativeModule?.removeListeners(1);\n          // $FlowFixMe[incompatible-use]\n          subscription.remove();\n          subscription = null;\n        }\n      },\n    };\n  }\n\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n  removeListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: $ElementType<TEventToArgsMap, TEvent>) => mixed,\n  ): void {\n    this._nativeModule?.removeListeners(1);\n    // NOTE: This will report a deprecation notice via `console.error`.\n    // $FlowFixMe[prop-missing] - `removeListener` exists but is deprecated.\n    RCTDeviceEventEmitter.removeListener(eventType, listener);\n  }\n\n  emit<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    ...args: $ElementType<TEventToArgsMap, TEvent>\n  ): void {\n    // Generally, `RCTDeviceEventEmitter` is directly invoked. But this is\n    // included for completeness.\n    RCTDeviceEventEmitter.emit(eventType, ...args);\n  }\n\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(\n    eventType?: ?TEvent,\n  ): void {\n    invariant(\n      eventType != null,\n      '`NativeEventEmitter.removeAllListener()` requires a non-null argument.',\n    );\n    this._nativeModule?.removeListeners(this.listenerCount(eventType));\n    RCTDeviceEventEmitter.removeAllListeners(eventType);\n  }\n\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number {\n    return RCTDeviceEventEmitter.listenerCount(eventType);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}