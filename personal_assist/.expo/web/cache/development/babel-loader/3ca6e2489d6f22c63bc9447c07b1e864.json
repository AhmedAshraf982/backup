{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _RCTDeviceEventEmitter = _interopRequireDefault(require(\"../../EventEmitter/RCTDeviceEventEmitter\"));\n\nvar _ReactNative = require(\"../../Renderer/shims/ReactNative\");\n\nvar _Platform = _interopRequireDefault(require(\"../../Utilities/Platform\"));\n\nvar _NativeAccessibilityInfo = _interopRequireDefault(require(\"./NativeAccessibilityInfo\"));\n\nvar _NativeAccessibilityManager = _interopRequireDefault(require(\"./NativeAccessibilityManager\"));\n\nvar _legacySendAccessibilityEvent = _interopRequireDefault(require(\"./legacySendAccessibilityEvent\"));\n\nvar EventNames = _Platform.default.OS === 'android' ? new Map([['change', 'touchExplorationDidChange'], ['reduceMotionChanged', 'reduceMotionDidChange'], ['screenReaderChanged', 'touchExplorationDidChange']]) : new Map([['announcementFinished', 'announcementFinished'], ['boldTextChanged', 'boldTextChanged'], ['change', 'screenReaderChanged'], ['grayscaleChanged', 'grayscaleChanged'], ['invertColorsChanged', 'invertColorsChanged'], ['reduceMotionChanged', 'reduceMotionChanged'], ['reduceTransparencyChanged', 'reduceTransparencyChanged'], ['screenReaderChanged', 'screenReaderChanged']]);\nvar AccessibilityInfo = {\n  isBoldTextEnabled: function isBoldTextEnabled() {\n    if (_Platform.default.OS === 'android') {\n      return Promise.resolve(false);\n    } else {\n      return new Promise(function (resolve, reject) {\n        if (_NativeAccessibilityManager.default != null) {\n          _NativeAccessibilityManager.default.getCurrentBoldTextState(resolve, reject);\n        } else {\n          reject(null);\n        }\n      });\n    }\n  },\n  isGrayscaleEnabled: function isGrayscaleEnabled() {\n    if (_Platform.default.OS === 'android') {\n      return Promise.resolve(false);\n    } else {\n      return new Promise(function (resolve, reject) {\n        if (_NativeAccessibilityManager.default != null) {\n          _NativeAccessibilityManager.default.getCurrentGrayscaleState(resolve, reject);\n        } else {\n          reject(null);\n        }\n      });\n    }\n  },\n  isInvertColorsEnabled: function isInvertColorsEnabled() {\n    if (_Platform.default.OS === 'android') {\n      return Promise.resolve(false);\n    } else {\n      return new Promise(function (resolve, reject) {\n        if (_NativeAccessibilityManager.default != null) {\n          _NativeAccessibilityManager.default.getCurrentInvertColorsState(resolve, reject);\n        } else {\n          reject(null);\n        }\n      });\n    }\n  },\n  isReduceMotionEnabled: function isReduceMotionEnabled() {\n    return new Promise(function (resolve, reject) {\n      if (_Platform.default.OS === 'android') {\n        if (_NativeAccessibilityInfo.default != null) {\n          _NativeAccessibilityInfo.default.isReduceMotionEnabled(resolve);\n        } else {\n          reject(null);\n        }\n      } else {\n        if (_NativeAccessibilityManager.default != null) {\n          _NativeAccessibilityManager.default.getCurrentReduceMotionState(resolve, reject);\n        } else {\n          reject(null);\n        }\n      }\n    });\n  },\n  isReduceTransparencyEnabled: function isReduceTransparencyEnabled() {\n    if (_Platform.default.OS === 'android') {\n      return Promise.resolve(false);\n    } else {\n      return new Promise(function (resolve, reject) {\n        if (_NativeAccessibilityManager.default != null) {\n          _NativeAccessibilityManager.default.getCurrentReduceTransparencyState(resolve, reject);\n        } else {\n          reject(null);\n        }\n      });\n    }\n  },\n  isScreenReaderEnabled: function isScreenReaderEnabled() {\n    return new Promise(function (resolve, reject) {\n      if (_Platform.default.OS === 'android') {\n        if (_NativeAccessibilityInfo.default != null) {\n          _NativeAccessibilityInfo.default.isTouchExplorationEnabled(resolve);\n        } else {\n          reject(null);\n        }\n      } else {\n        if (_NativeAccessibilityManager.default != null) {\n          _NativeAccessibilityManager.default.getCurrentVoiceOverState(resolve, reject);\n        } else {\n          reject(null);\n        }\n      }\n    });\n  },\n  addEventListener: function addEventListener(eventName, handler) {\n    var deviceEventName = EventNames.get(eventName);\n    return deviceEventName == null ? {\n      remove: function remove() {}\n    } : _RCTDeviceEventEmitter.default.addListener(deviceEventName, handler);\n  },\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {\n    (0, _legacySendAccessibilityEvent.default)(reactTag, 'focus');\n  },\n  sendAccessibilityEvent_unstable: function sendAccessibilityEvent_unstable(handle, eventType) {\n    if (_Platform.default.OS === 'ios' && eventType === 'click') {\n      return;\n    }\n\n    (0, _ReactNative.sendAccessibilityEvent)(handle, eventType);\n  },\n  announceForAccessibility: function announceForAccessibility(announcement) {\n    if (_Platform.default.OS === 'android') {\n      _NativeAccessibilityInfo.default == null ? void 0 : _NativeAccessibilityInfo.default.announceForAccessibility(announcement);\n    } else {\n      _NativeAccessibilityManager.default == null ? void 0 : _NativeAccessibilityManager.default.announceForAccessibility(announcement);\n    }\n  },\n  removeEventListener: function removeEventListener(eventName, handler) {\n    var deviceEventName = EventNames.get(eventName);\n\n    if (deviceEventName != null) {\n      _RCTDeviceEventEmitter.default.removeListener('deviceEventName', handler);\n    }\n  },\n  getRecommendedTimeoutMillis: function getRecommendedTimeoutMillis(originalTimeout) {\n    if (_Platform.default.OS === 'android') {\n      return new Promise(function (resolve, reject) {\n        if (_NativeAccessibilityInfo.default != null && _NativeAccessibilityInfo.default.getRecommendedTimeoutMillis) {\n          _NativeAccessibilityInfo.default.getRecommendedTimeoutMillis(originalTimeout, resolve);\n        } else {\n          resolve(originalTimeout);\n        }\n      });\n    } else {\n      return Promise.resolve(originalTimeout);\n    }\n  }\n};\nvar _default = AccessibilityInfo;\nexports.default = _default;","map":{"version":3,"sources":["D:/vsCodes/friday/personal_assist/node_modules/react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo.js"],"names":["EventNames","Platform","OS","Map","AccessibilityInfo","isBoldTextEnabled","Promise","resolve","reject","NativeAccessibilityManagerIOS","getCurrentBoldTextState","isGrayscaleEnabled","getCurrentGrayscaleState","isInvertColorsEnabled","getCurrentInvertColorsState","isReduceMotionEnabled","NativeAccessibilityInfoAndroid","getCurrentReduceMotionState","isReduceTransparencyEnabled","getCurrentReduceTransparencyState","isScreenReaderEnabled","isTouchExplorationEnabled","getCurrentVoiceOverState","addEventListener","eventName","handler","deviceEventName","get","remove","RCTDeviceEventEmitter","addListener","setAccessibilityFocus","reactTag","sendAccessibilityEvent_unstable","handle","eventType","announceForAccessibility","announcement","removeEventListener","removeListener","getRecommendedTimeoutMillis","originalTimeout"],"mappings":";;;;;;;AAUA;;AACA;;AAEA;;AAGA;;AACA;;AACA;;AAsBA,IAAMA,UAA6D,GACjEC,kBAASC,EAAT,KAAgB,SAAhB,GACI,IAAIC,GAAJ,CAAQ,CACN,CAAC,QAAD,EAAW,2BAAX,CADM,EAEN,CAAC,qBAAD,EAAwB,uBAAxB,CAFM,EAGN,CAAC,qBAAD,EAAwB,2BAAxB,CAHM,CAAR,CADJ,GAMI,IAAIA,GAAJ,CAAQ,CACN,CAAC,sBAAD,EAAyB,sBAAzB,CADM,EAEN,CAAC,iBAAD,EAAoB,iBAApB,CAFM,EAGN,CAAC,QAAD,EAAW,qBAAX,CAHM,EAIN,CAAC,kBAAD,EAAqB,kBAArB,CAJM,EAKN,CAAC,qBAAD,EAAwB,qBAAxB,CALM,EAMN,CAAC,qBAAD,EAAwB,qBAAxB,CANM,EAON,CAAC,2BAAD,EAA8B,2BAA9B,CAPM,EAQN,CAAC,qBAAD,EAAwB,qBAAxB,CARM,CAAR,CAPN;AA2BA,IAAMC,iBAAiB,GAAG;AASxBC,EAAAA,iBATwB,+BASc;AACpC,QAAIJ,kBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,aAAOI,OAAO,CAACC,OAAR,CAAgB,KAAhB,CAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAID,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIC,uCAAiC,IAArC,EAA2C;AACzCA,8CAA8BC,uBAA9B,CACEH,OADF,EAEEC,MAFF;AAID,SALD,MAKO;AACLA,UAAAA,MAAM,CAAC,IAAD,CAAN;AACD;AACF,OATM,CAAP;AAUD;AACF,GAxBuB;AAkCxBG,EAAAA,kBAlCwB,gCAkCe;AACrC,QAAIV,kBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,aAAOI,OAAO,CAACC,OAAR,CAAgB,KAAhB,CAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAID,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIC,uCAAiC,IAArC,EAA2C;AACzCA,8CAA8BG,wBAA9B,CACEL,OADF,EAEEC,MAFF;AAID,SALD,MAKO;AACLA,UAAAA,MAAM,CAAC,IAAD,CAAN;AACD;AACF,OATM,CAAP;AAUD;AACF,GAjDuB;AA2DxBK,EAAAA,qBA3DwB,mCA2DkB;AACxC,QAAIZ,kBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,aAAOI,OAAO,CAACC,OAAR,CAAgB,KAAhB,CAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAID,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIC,uCAAiC,IAArC,EAA2C;AACzCA,8CAA8BK,2BAA9B,CACEP,OADF,EAEEC,MAFF;AAID,SALD,MAKO;AACLA,UAAAA,MAAM,CAAC,IAAD,CAAN;AACD;AACF,OATM,CAAP;AAUD;AACF,GA1EuB;AAoFxBO,EAAAA,qBApFwB,mCAoFkB;AACxC,WAAO,IAAIT,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,UAAIP,kBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAIc,oCAAkC,IAAtC,EAA4C;AAC1CA,2CAA+BD,qBAA/B,CAAqDR,OAArD;AACD,SAFD,MAEO;AACLC,UAAAA,MAAM,CAAC,IAAD,CAAN;AACD;AACF,OAND,MAMO;AACL,YAAIC,uCAAiC,IAArC,EAA2C;AACzCA,8CAA8BQ,2BAA9B,CACEV,OADF,EAEEC,MAFF;AAID,SALD,MAKO;AACLA,UAAAA,MAAM,CAAC,IAAD,CAAN;AACD;AACF;AACF,KAjBM,CAAP;AAkBD,GAvGuB;AAiHxBU,EAAAA,2BAjHwB,yCAiHwB;AAC9C,QAAIjB,kBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,aAAOI,OAAO,CAACC,OAAR,CAAgB,KAAhB,CAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAID,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIC,uCAAiC,IAArC,EAA2C;AACzCA,8CAA8BU,iCAA9B,CACEZ,OADF,EAEEC,MAFF;AAID,SALD,MAKO;AACLA,UAAAA,MAAM,CAAC,IAAD,CAAN;AACD;AACF,OATM,CAAP;AAUD;AACF,GAhIuB;AA0IxBY,EAAAA,qBA1IwB,mCA0IkB;AACxC,WAAO,IAAId,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,UAAIP,kBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAIc,oCAAkC,IAAtC,EAA4C;AAC1CA,2CAA+BK,yBAA/B,CAAyDd,OAAzD;AACD,SAFD,MAEO;AACLC,UAAAA,MAAM,CAAC,IAAD,CAAN;AACD;AACF,OAND,MAMO;AACL,YAAIC,uCAAiC,IAArC,EAA2C;AACzCA,8CAA8Ba,wBAA9B,CACEf,OADF,EAEEC,MAFF;AAID,SALD,MAKO;AACLA,UAAAA,MAAM,CAAC,IAAD,CAAN;AACD;AACF;AACF,KAjBM,CAAP;AAkBD,GA7JuB;AAiMxBe,EAAAA,gBAjMwB,4BAkMtBC,SAlMsB,EAmMtBC,OAnMsB,EAoMH;AACnB,QAAMC,eAAe,GAAG1B,UAAU,CAAC2B,GAAX,CAAeH,SAAf,CAAxB;AACA,WAAOE,eAAe,IAAI,IAAnB,GACH;AAACE,MAAAA,MAAD,oBAAgB,CAAE;AAAlB,KADG,GAEHC,+BAAsBC,WAAtB,CAAkCJ,eAAlC,EAAmDD,OAAnD,CAFJ;AAGD,GAzMuB;AAgNxBM,EAAAA,qBAhNwB,iCAgNFC,QAhNE,EAgNsB;AAC5C,+CAA6BA,QAA7B,EAAuC,OAAvC;AACD,GAlNuB;AAuNxBC,EAAAA,+BAvNwB,2CAwNtBC,MAxNsB,EAyNtBC,SAzNsB,EA0NtB;AAEA,QAAIlC,kBAASC,EAAT,KAAgB,KAAhB,IAAyBiC,SAAS,KAAK,OAA3C,EAAoD;AAClD;AACD;;AAED,6CAAuBD,MAAvB,EAA+BC,SAA/B;AACD,GAjOuB;AAwOxBC,EAAAA,wBAxOwB,oCAwOCC,YAxOD,EAwO6B;AACnD,QAAIpC,kBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7Bc,2FAAgCoB,wBAAhC,CAAyDC,YAAzD;AACD,KAFD,MAEO;AACL5B,iGAA+B2B,wBAA/B,CAAwDC,YAAxD;AACD;AACF,GA9OuB;AAmPxBC,EAAAA,mBAnPwB,+BAoPtBd,SApPsB,EAqPtBC,OArPsB,EAsPhB;AAEN,QAAMC,eAAe,GAAG1B,UAAU,CAAC2B,GAAX,CAAeH,SAAf,CAAxB;;AACA,QAAIE,eAAe,IAAI,IAAvB,EAA6B;AAE1BG,oCAAD,CAAkDU,cAAlD,CACE,iBADF,EAGEd,OAHF;AAKD;AACF,GAjQuB;AAwQxBe,EAAAA,2BAxQwB,uCAwQIC,eAxQJ,EAwQ8C;AACpE,QAAIxC,kBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,aAAO,IAAII,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIQ,gCAAJ,YAAIA,iCAAgCwB,2BAApC,EAAiE;AAC/DxB,2CAA+BwB,2BAA/B,CACEC,eADF,EAEElC,OAFF;AAID,SALD,MAKO;AACLA,UAAAA,OAAO,CAACkC,eAAD,CAAP;AACD;AACF,OATM,CAAP;AAUD,KAXD,MAWO;AACL,aAAOnC,OAAO,CAACC,OAAR,CAAgBkC,eAAhB,CAAP;AACD;AACF;AAvRuB,CAA1B;eA0RerC,iB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport RCTDeviceEventEmitter from '../../EventEmitter/RCTDeviceEventEmitter';\nimport {sendAccessibilityEvent} from '../../Renderer/shims/ReactNative';\nimport type {HostComponent} from '../../Renderer/shims/ReactNativeTypes';\nimport Platform from '../../Utilities/Platform';\nimport type EventEmitter from '../../vendor/emitter/EventEmitter';\nimport type {EventSubscription} from '../../vendor/emitter/EventEmitter';\nimport NativeAccessibilityInfoAndroid from './NativeAccessibilityInfo';\nimport NativeAccessibilityManagerIOS from './NativeAccessibilityManager';\nimport legacySendAccessibilityEvent from './legacySendAccessibilityEvent';\nimport type {ElementRef} from 'react';\n\n// Events that are only supported on iOS.\ntype AccessibilityEventDefinitionsIOS = {\n  announcementFinished: [{announcement: string, success: boolean}],\n  boldTextChanged: [boolean],\n  grayscaleChanged: [boolean],\n  invertColorsChanged: [boolean],\n  reduceTransparencyChanged: [boolean],\n};\n\ntype AccessibilityEventDefinitions = {\n  ...AccessibilityEventDefinitionsIOS,\n  change: [boolean], // screenReaderChanged\n  reduceMotionChanged: [boolean],\n  screenReaderChanged: [boolean],\n};\n\ntype AccessibilityEventTypes = 'click' | 'focus';\n\n// Mapping of public event names to platform-specific event names.\nconst EventNames: Map<$Keys<AccessibilityEventDefinitions>, string> =\n  Platform.OS === 'android'\n    ? new Map([\n        ['change', 'touchExplorationDidChange'],\n        ['reduceMotionChanged', 'reduceMotionDidChange'],\n        ['screenReaderChanged', 'touchExplorationDidChange'],\n      ])\n    : new Map([\n        ['announcementFinished', 'announcementFinished'],\n        ['boldTextChanged', 'boldTextChanged'],\n        ['change', 'screenReaderChanged'],\n        ['grayscaleChanged', 'grayscaleChanged'],\n        ['invertColorsChanged', 'invertColorsChanged'],\n        ['reduceMotionChanged', 'reduceMotionChanged'],\n        ['reduceTransparencyChanged', 'reduceTransparencyChanged'],\n        ['screenReaderChanged', 'screenReaderChanged'],\n      ]);\n\n/**\n * Sometimes it's useful to know whether or not the device has a screen reader\n * that is currently active. The `AccessibilityInfo` API is designed for this\n * purpose. You can use it to query the current state of the screen reader as\n * well as to register to be notified when the state of the screen reader\n * changes.\n *\n * See https://reactnative.dev/docs/accessibilityinfo.html\n */\nconst AccessibilityInfo = {\n  /**\n   * Query whether bold text is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when bold text is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo.html#isBoldTextEnabled\n   */\n  isBoldTextEnabled(): Promise<boolean> {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(false);\n    } else {\n      return new Promise((resolve, reject) => {\n        if (NativeAccessibilityManagerIOS != null) {\n          NativeAccessibilityManagerIOS.getCurrentBoldTextState(\n            resolve,\n            reject,\n          );\n        } else {\n          reject(null);\n        }\n      });\n    }\n  },\n\n  /**\n   * Query whether grayscale is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when grayscale is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo.html#isGrayscaleEnabled\n   */\n  isGrayscaleEnabled(): Promise<boolean> {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(false);\n    } else {\n      return new Promise((resolve, reject) => {\n        if (NativeAccessibilityManagerIOS != null) {\n          NativeAccessibilityManagerIOS.getCurrentGrayscaleState(\n            resolve,\n            reject,\n          );\n        } else {\n          reject(null);\n        }\n      });\n    }\n  },\n\n  /**\n   * Query whether inverted colors are currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when invert color is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo.html#isInvertColorsEnabled\n   */\n  isInvertColorsEnabled(): Promise<boolean> {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(false);\n    } else {\n      return new Promise((resolve, reject) => {\n        if (NativeAccessibilityManagerIOS != null) {\n          NativeAccessibilityManagerIOS.getCurrentInvertColorsState(\n            resolve,\n            reject,\n          );\n        } else {\n          reject(null);\n        }\n      });\n    }\n  },\n\n  /**\n   * Query whether reduced motion is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a reduce motion is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo.html#isReduceMotionEnabled\n   */\n  isReduceMotionEnabled(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (Platform.OS === 'android') {\n        if (NativeAccessibilityInfoAndroid != null) {\n          NativeAccessibilityInfoAndroid.isReduceMotionEnabled(resolve);\n        } else {\n          reject(null);\n        }\n      } else {\n        if (NativeAccessibilityManagerIOS != null) {\n          NativeAccessibilityManagerIOS.getCurrentReduceMotionState(\n            resolve,\n            reject,\n          );\n        } else {\n          reject(null);\n        }\n      }\n    });\n  },\n\n  /**\n   * Query whether reduced transparency is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a reduce transparency is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo.html#isReduceTransparencyEnabled\n   */\n  isReduceTransparencyEnabled(): Promise<boolean> {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(false);\n    } else {\n      return new Promise((resolve, reject) => {\n        if (NativeAccessibilityManagerIOS != null) {\n          NativeAccessibilityManagerIOS.getCurrentReduceTransparencyState(\n            resolve,\n            reject,\n          );\n        } else {\n          reject(null);\n        }\n      });\n    }\n  },\n\n  /**\n   * Query whether a screen reader is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo.html#isScreenReaderEnabled\n   */\n  isScreenReaderEnabled(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (Platform.OS === 'android') {\n        if (NativeAccessibilityInfoAndroid != null) {\n          NativeAccessibilityInfoAndroid.isTouchExplorationEnabled(resolve);\n        } else {\n          reject(null);\n        }\n      } else {\n        if (NativeAccessibilityManagerIOS != null) {\n          NativeAccessibilityManagerIOS.getCurrentVoiceOverState(\n            resolve,\n            reject,\n          );\n        } else {\n          reject(null);\n        }\n      }\n    });\n  },\n\n  /**\n   * Add an event handler. Supported events:\n   *\n   * - `reduceMotionChanged`: Fires when the state of the reduce motion toggle changes.\n   *   The argument to the event handler is a boolean. The boolean is `true` when a reduce\n   *   motion is enabled (or when \"Transition Animation Scale\" in \"Developer options\" is\n   *   \"Animation off\") and `false` otherwise.\n   * - `screenReaderChanged`: Fires when the state of the screen reader changes. The argument\n   *   to the event handler is a boolean. The boolean is `true` when a screen\n   *   reader is enabled and `false` otherwise.\n   *\n   * These events are only supported on iOS:\n   *\n   * - `boldTextChanged`: iOS-only event. Fires when the state of the bold text toggle changes.\n   *   The argument to the event handler is a boolean. The boolean is `true` when a bold text\n   *   is enabled and `false` otherwise.\n   * - `grayscaleChanged`: iOS-only event. Fires when the state of the gray scale toggle changes.\n   *   The argument to the event handler is a boolean. The boolean is `true` when a gray scale\n   *   is enabled and `false` otherwise.\n   * - `invertColorsChanged`: iOS-only event. Fires when the state of the invert colors toggle\n   *   changes. The argument to the event handler is a boolean. The boolean is `true` when a invert\n   *   colors is enabled and `false` otherwise.\n   * - `reduceTransparencyChanged`: iOS-only event. Fires when the state of the reduce transparency\n   *   toggle changes.  The argument to the event handler is a boolean. The boolean is `true`\n   *   when a reduce transparency is enabled and `false` otherwise.\n   * - `announcementFinished`: iOS-only event. Fires when the screen reader has\n   *   finished making an announcement. The argument to the event handler is a\n   *   dictionary with these keys:\n   *     - `announcement`: The string announced by the screen reader.\n   *     - `success`: A boolean indicating whether the announcement was\n   *       successfully made.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo.html#addeventlistener\n   */\n  addEventListener<K: $Keys<AccessibilityEventDefinitions>>(\n    eventName: K,\n    handler: (...$ElementType<AccessibilityEventDefinitions, K>) => void,\n  ): EventSubscription {\n    const deviceEventName = EventNames.get(eventName);\n    return deviceEventName == null\n      ? {remove(): void {}}\n      : RCTDeviceEventEmitter.addListener(deviceEventName, handler);\n  },\n\n  /**\n   * Set accessibility focus to a React component.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo.html#setaccessibilityfocus\n   */\n  setAccessibilityFocus(reactTag: number): void {\n    legacySendAccessibilityEvent(reactTag, 'focus');\n  },\n\n  /**\n   * Send a named accessibility event to a HostComponent.\n   */\n  sendAccessibilityEvent_unstable(\n    handle: ElementRef<HostComponent<mixed>>,\n    eventType: AccessibilityEventTypes,\n  ) {\n    // iOS only supports 'focus' event types\n    if (Platform.OS === 'ios' && eventType === 'click') {\n      return;\n    }\n    // route through React renderer to distinguish between Fabric and non-Fabric handles\n    sendAccessibilityEvent(handle, eventType);\n  },\n\n  /**\n   * Post a string to be announced by the screen reader.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo.html#announceforaccessibility\n   */\n  announceForAccessibility(announcement: string): void {\n    if (Platform.OS === 'android') {\n      NativeAccessibilityInfoAndroid?.announceForAccessibility(announcement);\n    } else {\n      NativeAccessibilityManagerIOS?.announceForAccessibility(announcement);\n    }\n  },\n\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addEventListener`.\n   */\n  removeEventListener<K: $Keys<AccessibilityEventDefinitions>>(\n    eventName: K,\n    handler: (...$ElementType<AccessibilityEventDefinitions, K>) => void,\n  ): void {\n    // NOTE: This will report a deprecation notice via `console.error`.\n    const deviceEventName = EventNames.get(eventName);\n    if (deviceEventName != null) {\n      // $FlowIgnore[incompatible-cast]\n      (RCTDeviceEventEmitter: EventEmitter<$FlowFixMe>).removeListener(\n        'deviceEventName',\n        // $FlowFixMe[invalid-tuple-arity]\n        handler,\n      );\n    }\n  },\n\n  /**\n   * Get the recommended timeout for changes to the UI needed by this user.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo.html#getrecommendedtimeoutmillis\n   */\n  getRecommendedTimeoutMillis(originalTimeout: number): Promise<number> {\n    if (Platform.OS === 'android') {\n      return new Promise((resolve, reject) => {\n        if (NativeAccessibilityInfoAndroid?.getRecommendedTimeoutMillis) {\n          NativeAccessibilityInfoAndroid.getRecommendedTimeoutMillis(\n            originalTimeout,\n            resolve,\n          );\n        } else {\n          resolve(originalTimeout);\n        }\n      });\n    } else {\n      return Promise.resolve(originalTimeout);\n    }\n  },\n};\n\nexport default AccessibilityInfo;\n"]},"metadata":{},"sourceType":"script"}