{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _AndroidSwipeRefreshLayoutNativeComponent = _interopRequireWildcard(require(\"./AndroidSwipeRefreshLayoutNativeComponent\"));\n\nvar _PullToRefreshViewNativeComponent = _interopRequireWildcard(require(\"./PullToRefreshViewNativeComponent\"));\n\nvar _jsxFileName = \"D:\\\\vsCodes\\\\friday\\\\personal_assist\\\\node_modules\\\\react-native\\\\Libraries\\\\Components\\\\RefreshControl\\\\RefreshControl.js\";\nvar _excluded = [\"enabled\", \"colors\", \"progressBackgroundColor\", \"size\"],\n    _excluded2 = [\"tintColor\", \"titleColor\", \"title\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Platform = require('../../Utilities/Platform');\n\nvar React = require('react');\n\nvar RefreshControl = function (_React$Component) {\n  (0, _inherits2.default)(RefreshControl, _React$Component);\n\n  var _super = _createSuper(RefreshControl);\n\n  function RefreshControl() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, RefreshControl);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._lastNativeRefreshing = false;\n\n    _this._onRefresh = function () {\n      _this._lastNativeRefreshing = true;\n      _this.props.onRefresh && _this.props.onRefresh();\n\n      _this.forceUpdate();\n    };\n\n    _this._setNativeRef = function (ref) {\n      _this._nativeRef = ref;\n    };\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(RefreshControl, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._lastNativeRefreshing = this.props.refreshing;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.refreshing !== prevProps.refreshing) {\n        this._lastNativeRefreshing = this.props.refreshing;\n      } else if (this.props.refreshing !== this._lastNativeRefreshing && this._nativeRef) {\n        if (Platform.OS === 'android') {\n          _AndroidSwipeRefreshLayoutNativeComponent.Commands.setNativeRefreshing(this._nativeRef, this.props.refreshing);\n        } else {\n          _PullToRefreshViewNativeComponent.Commands.setNativeRefreshing(this._nativeRef, this.props.refreshing);\n        }\n\n        this._lastNativeRefreshing = this.props.refreshing;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (Platform.OS === 'ios') {\n        var _this$props = this.props,\n            enabled = _this$props.enabled,\n            colors = _this$props.colors,\n            progressBackgroundColor = _this$props.progressBackgroundColor,\n            size = _this$props.size,\n            props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);\n        return React.createElement(_PullToRefreshViewNativeComponent.default, (0, _extends2.default)({}, props, {\n          ref: this._setNativeRef,\n          onRefresh: this._onRefresh,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 9\n          }\n        }));\n      } else {\n        var _this$props2 = this.props,\n            tintColor = _this$props2.tintColor,\n            titleColor = _this$props2.titleColor,\n            title = _this$props2.title,\n            _props = (0, _objectWithoutProperties2.default)(_this$props2, _excluded2);\n\n        return React.createElement(_AndroidSwipeRefreshLayoutNativeComponent.default, (0, _extends2.default)({}, _props, {\n          ref: this._setNativeRef,\n          onRefresh: this._onRefresh,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 9\n          }\n        }));\n      }\n    }\n  }]);\n  return RefreshControl;\n}(React.Component);\n\nmodule.exports = RefreshControl;","map":{"version":3,"sources":["D:/vsCodes/friday/personal_assist/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js"],"names":["Platform","require","React","RefreshControl","_lastNativeRefreshing","_onRefresh","props","onRefresh","forceUpdate","_setNativeRef","ref","_nativeRef","refreshing","prevProps","OS","AndroidSwipeRefreshLayoutCommands","setNativeRefreshing","PullToRefreshCommands","enabled","colors","progressBackgroundColor","size","tintColor","titleColor","title","Component","module","exports"],"mappings":";;;;;;;;;;;;;;;;AAeA;;AAGA;;;;;;;;;;;;;;AARA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,0BAAD,CAAxB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;IA+GME,c;;;;;;;;;;;;;;;UAKJC,qB,GAAwB,K;;UA2DxBC,U,GAAa,YAAM;AACjB,YAAKD,qBAAL,GAA6B,IAA7B;AAEA,YAAKE,KAAL,CAAWC,SAAX,IAAwB,MAAKD,KAAL,CAAWC,SAAX,EAAxB;;AAIA,YAAKC,WAAL;AACD,K;;UAEDC,a,GAAgB,UACdC,GADc,EAKX;AACH,YAAKC,UAAL,GAAkBD,GAAlB;AACD,K;;;;;;;WA1ED,6BAAoB;AAClB,WAAKN,qBAAL,GAA6B,KAAKE,KAAL,CAAWM,UAAxC;AACD;;;WAED,4BAAmBC,SAAnB,EAAmD;AAIjD,UAAI,KAAKP,KAAL,CAAWM,UAAX,KAA0BC,SAAS,CAACD,UAAxC,EAAoD;AAClD,aAAKR,qBAAL,GAA6B,KAAKE,KAAL,CAAWM,UAAxC;AACD,OAFD,MAEO,IACL,KAAKN,KAAL,CAAWM,UAAX,KAA0B,KAAKR,qBAA/B,IACA,KAAKO,UAFA,EAGL;AACA,YAAIX,QAAQ,CAACc,EAAT,KAAgB,SAApB,EAA+B;AAC7BC,6DAAkCC,mBAAlC,CACE,KAAKL,UADP,EAEE,KAAKL,KAAL,CAAWM,UAFb;AAID,SALD,MAKO;AACLK,qDAAsBD,mBAAtB,CACE,KAAKL,UADP,EAEE,KAAKL,KAAL,CAAWM,UAFb;AAID;;AACD,aAAKR,qBAAL,GAA6B,KAAKE,KAAL,CAAWM,UAAxC;AACD;AACF;;;WAED,kBAAqB;AACnB,UAAIZ,QAAQ,CAACc,EAAT,KAAgB,KAApB,EAA2B;AACzB,0BAMI,KAAKR,KANT;AAAA,YACEY,OADF,eACEA,OADF;AAAA,YAEEC,MAFF,eAEEA,MAFF;AAAA,YAGEC,uBAHF,eAGEA,uBAHF;AAAA,YAIEC,IAJF,eAIEA,IAJF;AAAA,YAKKf,KALL;AAOA,eACE,oBAAC,yCAAD,6BACMA,KADN;AAEE,UAAA,GAAG,EAAE,KAAKG,aAFZ;AAGE,UAAA,SAAS,EAAE,KAAKJ,UAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAOD,OAfD,MAeO;AACL,2BAAiD,KAAKC,KAAtD;AAAA,YAAOgB,SAAP,gBAAOA,SAAP;AAAA,YAAkBC,UAAlB,gBAAkBA,UAAlB;AAAA,YAA8BC,KAA9B,gBAA8BA,KAA9B;AAAA,YAAwClB,MAAxC;;AACA,eACE,oBAAC,iDAAD,6BACMA,MADN;AAEE,UAAA,GAAG,EAAE,KAAKG,aAFZ;AAGE,UAAA,SAAS,EAAE,KAAKJ,UAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAOD;AACF;;;EA9D0BH,KAAK,CAACuB,S;;AAoFnCC,MAAM,CAACC,OAAP,GAAiBxB,cAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nconst Platform = require('../../Utilities/Platform');\nconst React = require('react');\n\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {ViewProps} from '../View/ViewPropTypes';\nimport AndroidSwipeRefreshLayoutNativeComponent, {\n  Commands as AndroidSwipeRefreshLayoutCommands,\n} from './AndroidSwipeRefreshLayoutNativeComponent';\nimport PullToRefreshViewNativeComponent, {\n  Commands as PullToRefreshCommands,\n} from './PullToRefreshViewNativeComponent';\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * The color of the refresh indicator.\n   */\n  tintColor?: ?ColorValue,\n  /**\n   * Title color.\n   */\n  titleColor?: ?ColorValue,\n  /**\n   * The title displayed under the refresh indicator.\n   */\n  title?: ?string,\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * Whether the pull to refresh functionality is enabled.\n   */\n  enabled?: ?boolean,\n  /**\n   * The colors (at least one) that will be used to draw the refresh indicator.\n   */\n  colors?: ?$ReadOnlyArray<ColorValue>,\n  /**\n   * The background color of the refresh indicator.\n   */\n  progressBackgroundColor?: ?ColorValue,\n  /**\n   * Size of the refresh indicator.\n   */\n  size?: ?('default' | 'large'),\n|}>;\n\nexport type RefreshControlProps = $ReadOnly<{|\n  ...ViewProps,\n  ...IOSProps,\n  ...AndroidProps,\n\n  /**\n   * Called when the view starts refreshing.\n   */\n  onRefresh?: ?() => void | Promise<void>,\n\n  /**\n   * Whether the view should be indicating an active refresh.\n   */\n  refreshing: boolean,\n\n  /**\n   * Progress view top offset\n   */\n  progressViewOffset?: ?number,\n|}>;\n\n/**\n * This component is used inside a ScrollView or ListView to add pull to refresh\n * functionality. When the ScrollView is at `scrollY: 0`, swiping down\n * triggers an `onRefresh` event.\n *\n * ### Usage example\n *\n * ``` js\n * class RefreshableList extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       refreshing: false,\n *     };\n *   }\n *\n *   _onRefresh() {\n *     this.setState({refreshing: true});\n *     fetchData().then(() => {\n *       this.setState({refreshing: false});\n *     });\n *   }\n *\n *   render() {\n *     return (\n *       <ListView\n *         refreshControl={\n *           <RefreshControl\n *             refreshing={this.state.refreshing}\n *             onRefresh={this._onRefresh.bind(this)}\n *           />\n *         }\n *         ...\n *       >\n *       ...\n *       </ListView>\n *     );\n *   }\n *   ...\n * }\n * ```\n *\n * __Note:__ `refreshing` is a controlled prop, this is why it needs to be set to true\n * in the `onRefresh` function otherwise the refresh indicator will stop immediately.\n */\nclass RefreshControl extends React.Component<RefreshControlProps> {\n  _nativeRef: ?React.ElementRef<\n    | typeof PullToRefreshViewNativeComponent\n    | typeof AndroidSwipeRefreshLayoutNativeComponent,\n  >;\n  _lastNativeRefreshing = false;\n\n  componentDidMount() {\n    this._lastNativeRefreshing = this.props.refreshing;\n  }\n\n  componentDidUpdate(prevProps: RefreshControlProps) {\n    // RefreshControl is a controlled component so if the native refreshing\n    // value doesn't match the current js refreshing prop update it to\n    // the js value.\n    if (this.props.refreshing !== prevProps.refreshing) {\n      this._lastNativeRefreshing = this.props.refreshing;\n    } else if (\n      this.props.refreshing !== this._lastNativeRefreshing &&\n      this._nativeRef\n    ) {\n      if (Platform.OS === 'android') {\n        AndroidSwipeRefreshLayoutCommands.setNativeRefreshing(\n          this._nativeRef,\n          this.props.refreshing,\n        );\n      } else {\n        PullToRefreshCommands.setNativeRefreshing(\n          this._nativeRef,\n          this.props.refreshing,\n        );\n      }\n      this._lastNativeRefreshing = this.props.refreshing;\n    }\n  }\n\n  render(): React.Node {\n    if (Platform.OS === 'ios') {\n      const {\n        enabled,\n        colors,\n        progressBackgroundColor,\n        size,\n        ...props\n      } = this.props;\n      return (\n        <PullToRefreshViewNativeComponent\n          {...props}\n          ref={this._setNativeRef}\n          onRefresh={this._onRefresh}\n        />\n      );\n    } else {\n      const {tintColor, titleColor, title, ...props} = this.props;\n      return (\n        <AndroidSwipeRefreshLayoutNativeComponent\n          {...props}\n          ref={this._setNativeRef}\n          onRefresh={this._onRefresh}\n        />\n      );\n    }\n  }\n\n  _onRefresh = () => {\n    this._lastNativeRefreshing = true;\n\n    this.props.onRefresh && this.props.onRefresh();\n\n    // The native component will start refreshing so force an update to\n    // make sure it stays in sync with the js component.\n    this.forceUpdate();\n  };\n\n  _setNativeRef = (\n    ref: ?React.ElementRef<\n      | typeof PullToRefreshViewNativeComponent\n      | typeof AndroidSwipeRefreshLayoutNativeComponent,\n    >,\n  ) => {\n    this._nativeRef = ref;\n  };\n}\n\nmodule.exports = RefreshControl;\n"]},"metadata":{},"sourceType":"script"}